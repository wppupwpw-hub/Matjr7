def create_python_file_with_arrays():
    """
    إنشاء ملف Python يحتوي على المصفوفات كمتغيرات.
    نظراً للحجم الكبير، سننشئ ملفات منفصلة لكل مجموعة من المصفوفات.
    """
    arrays_data = generate_arrays_data()
    
    print("🔄 إنشاء ملفات Python للمصفوفات...")
    
    # تقسيم المصفوفات إلى ملفات أصغر (50 مصفوفة لكل ملف)
    arrays_per_file = 50
    file_count = 0
    
    for start_idx in range(0, NUMBER_OF_ARRAYS, arrays_per_file):
        file_count += 1
        end_idx = min(start_idx + arrays_per_file, NUMBER_OF_ARRAYS)
        
        python_content = f'''# ملف قاعدة البيانات رقم {file_count}
# يحتوي على المصفوفات من {start_idx + 1} إلى {end_idx}
# تم إنتاج هذا الملف تلقائياً

'''
        
        current_arrays = []
        for i in range(start_idx + 1, end_idx + 1):
            array_name = f"responses_array_{i}"
            if array_name in arrays_data:
                array_data = arrays_data[array_name]
                current_arrays.append(array_name.upper())
                
                python_content += f"# المصفوفة رقم {i} - {len(array_data)} عنصر\n"
                python_content += f"{array_name.upper()} = [\n"
                
                for item in array_data:
                    question = item['question'].replace('"', '\\"').replace("'", "\\'")
                    answer = item['answer'].replace('"', '\\"').replace("'", "\\'")
                    python_content += f'    {{"question": "{question}", "answer": "{answer}", "category": "{item.get("category", "general")}"}},\n'
                
                python_content += "]\n\n"
        
        # إضافة دالات مساعدة
        python_content += f'''
# قائمة بجميع المصفوفات في هذا الملف
ALL_ARRAYS_FILE_{file_count} = [{', '.join(current_arrays)}]

# دالة للبحث في مصفوفات هذا الملف
def search_arrays_file_{file_count}(query):
    """
    البحث في مصفوفات الملف رقم {file_count}.
    """
    query = query.lower().strip()
    
    for array in ALL_ARRAYS_FILE_{file_count}:
        for item in array:
            if query in item['question'].lower():
                return item['answer']
    
    return None

# إحصائيات الملف
def get_file_{file_count}_statistics():
    """
    الحصول على إحصائيات ملف رقم {file_count}.
    """
    total_questions = sum(len(array) for array in ALL_ARRAYS_FILE_{file_count})
    return {{
        "file_number": {file_count},
        "arrays_count": len(ALL_ARRAYS_FILE_{file_count}),
        "total_questions": total_questions,
        "arrays_range": "{start_idx + 1}-{end_idx}"
    }}

if __name__ == "__main__":
    stats = get_file_{file_count}_statistics()
    print(f"📊 إحصائيات الملف رقم {file_count}:")
    print(f"   • عدد المصفوفات: {{stats['arrays_count']}}")
    print(f"   • نطاق المصفوفات: {{stats['arrays_range']}}")
    print(f"   • إجمالي الأسئلة: {{stats['total_questions']:,}}")
'''
        
        # حفظ الملف
        filename = f'responses_arrays_file_{file_count}.py'
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(python_content)
        
        print(f"✅ تم إنشاء {filename}")
    
    # إنشاء ملف رئيسي يجمع كل شيء
    main_file_content = f'''# الملف الرئيسي لقاعدة البيانات - 100,000 سؤال وجواب
# يستورد جميع ملفات المصفوفات

'''
    
    # استيراد جميع الملفات
    for i in range(1, file_count + 1):
        main_file_content += f"from responses_arrays_file_{i} import *\n"
    
    main_file_content += '''

# دالة البحث الشاملة في جميع الملفات
def search_all_responses(query):
    """
    البحث في جميع المصفوفات عبر كل الملفات.
    """
    query = query.lower().strip()
    
    # البحث في كل ملف
'''
    
    for i in range(1, file_count + 1):
        main_file_content += f'''    result = search_arrays_file_{i}(query)
    if result:
        return result
    
'''
    
    main_file_content += '''    return "عذراً، لم أجد إجابة لهذا السؤال."

# الإحصائيات الشاملة
def get_complete_statistics():
    """
    الحصول على إحصائيات شاملة لجميع البيانات.
    """
    total_files = ''' + str(file_count) + '''
    total_arrays = ''' + str(NUMBER_OF_ARRAYS) + '''
    total_questions = ''' + str(TOTAL_RESPONSES) + '''
    
    return {
        "total_files": total_files,
        "total_arrays": total_arrays,
        "total_questions": total_questions,
        "questions_per_array": ''' + str(RESPONSES_PER_ARRAY) + '''
    }

if __name__ == "__main__":
    stats = get_complete_statistics()
    print("🎉 قاعدة بيانات الأسئلة والأجوبة الضخمة")
    print("=" * 50)
    print(f"📊 الإحصائيات الشاملة:")
    print(f"   • عدد الملفات: {stats['total_files']}")
    print(f"   • عدد المصفوفات: {stats['total_arrays']:,}")
    print(f"   • إجمالي الأسئلة: {stats['total_questions']:,}")
    print(f"   • أسئلة لكل مصفوفة: {stats['questions_per_array']}")
    
    # اختبار البحث
    test_query = "ما هي عاصمة مصر"
    result = search_all_responses(test_query)
    print(f"\\n🔍 اختبار البحث:")
    print(f"   السؤال: {test_query}")
    print(f"   الإجابة: {result}")
'''
    
    with open('responses_main.py', 'w', encoding='utf-8') as f:
        f.write(main_file_content)
    
    printGENERAL_QA = [
    # أسئلة جغرافية
    {"question": "كم عدد أيام السنة؟", "answer": "السنة العادية 365 يوماً، والسنة الكبيسة 366 يوماً"},
    {"question": "كم عدد قارات العالم؟", "answer": "عدد قارات العالم 7 قارات: آسيا، أفريقيا، أوروبا، أمريكا الشمالية، أمريكا الجنوبية، أستراليا، والقطب الجنوبي"},
    {"question": "ما هي أكبر قارة في العالم؟", "answer": "آسيا هي أكبر قارة في العالم من حيث المساحة وعدد السكان"},
    {"question": "كم عدد المحيطات في العالم؟", "answer": "عدد المحيطات في العالم 5: الهادئ، الأطلسي، الهندي، المتجمد الشمالي، والمتجمد الجنوبي"},
    {"question": "ما هي أكبر دولة عربية؟", "answer": "الجزائر هي أكبر دولة عربية من حيث المساحة"},
    {"question": "ما هي أصغر دولة في العالم؟", "answer": "الفاتيكان هي أصغر دولة في العالم بمساحة 0.17 ميل مربع"},
    {"question": "ما هي أكبر جزيرة في العالم؟", "answer": "جرينلاند هي أكبر جزيرة في العالم"},
    {"question": "كم عدد دول العالم؟", "answer": "يوجد حوالي 195 دولة معترف بها في العالم"},
    
    # أسئلة عن جسم الإنسان
    {"question": "كم عدد عضلات جسم الإنسان؟", "answer": "جسم الإنسان يحتوي على حوالي 600 عضلة"},
    {"question": "كم عدد عظام جسم الإنسان؟", "answer": "جسم الإنسان البالغ يحتوي على 206 عظمة"},
    {"question": "كم عدد أسنان الإنسان البالغ؟", "answer": "الإنسان البالغ لديه 32 سناً"},
    {"question": "كم تبلغ نسبة الماء في جسم الإنسان؟", "answer": "الماء يشكل حوالي 60% من جسم الإنسان البالغ"},
    {"question": "كم عدد حواس الإنسان؟", "answer": "للإنسان 5 حواس أساسية: البصر، السمع، الشم، الذوق، واللمس"},
    {"question": "كم يبلغ عدد خلايا الدماغ البشري؟", "answer": "الدماغ البشري يحتوي على حوالي 86 مليار خلية عصبية"},
    
    # أسئلة علمية عامة
    {"question": "ما هي أسرع الحيوانات؟", "answer": "النمر هو أسرع الحيوانات البرية بسرعة تصل إلى 120 كم/ساعة"},
    {"question": "ما هي أكبر الحيوانات؟", "answer": "الحوت الأزرق هو أكبر حيوان في العالم"},
    {"question": "كم عدد أرجل العنكبوت؟", "answer": "للعنكبوت 8 أرجل"},
    {"question": "كم عدد أجنحة النحلة؟", "answer": "للنحلة 4 أجنحة"},
    {"question": "ما هو الغاز الأكثر وفرة في الهواء؟", "answer": "النيتروجين هو الغاز الأكثر وفرة في الهواء بنسبة 78%"},
    
    # أسئلة تاريخية
    {"question": "متى اخترعت الكهرباء؟", "answer": "الكهرباء لم تخترع بل اكتشفت، وبدأ استخدامها التجاري في أواخر القرن 19"},
    {"question": "متى اخترعت الطائرة؟", "answer": "اخترع الأخوان رايت الطائرة في عام 1903"},
    {"question": "متى انتهت الحرب العالمية الثانية؟", "answer": "انتهت الحرب العالمية الثانية في عام 1945"},
    {"question": "متى تأسست الأمم المتحدة؟", "answer": "تأسست الأمم المتحدة في عام 1945"},
    
    # أسئلة رياضية
    {"question": "كم يبلغ ناتج 2+2؟", "answer": "ناتج 2+2 هو 4"},
    {"question": "كم يبلغ ناتج 10×10؟", "answer": "ناتج 10×10 هو 100"},
    {"question": "ما هو الرقم الذي إذا ضرب في نفسه أعطى 16؟", "answer": "الرقم هو 4، لأن 4×4=16"},
    {"question": "كم عدد الدقائق في الساعة؟", "answer": "الساعة تحتوي على 60 دقيقة"},
    {"question": "كم عدد الثواني في الدقيقة؟", "answer": "الدقيقة تحتوي على 60 ثانية"},
    
    # أسئلة ثقافية
    {"question": "ما هي عاصمة الثقافة العربية؟", "answer": "تختلف عاصمة الثقافة العربية كل عام حسب اختيار المنظمة العربية للتربية والثقافة والعلوم"},
    {"question": "كم عدد أحرف الأبجدية العربية؟", "answer": "الأبجدية العربية تحتوي على 28 حرفاً"},
    {"question": "كم عدد أحرف الأبجدية الإنجليزية؟", "answer": "الأبجدية الإنجليزية تحتوي على 26 حرفاً"},
    
    # أسئلة فلكية
    {"question": "كم عدد كواكب المجموعة الشمسية؟", "answer": "المجموعة الشمسية تحتوي على 8 كواكب"},
    {"question": "ما هو أقرب كوكب للشمس؟", "answer": "عطارد هو أقرب كوكب للشمس"},
    {"question": "ما هو أكبر كوكب في المجموعة الشمسية؟", "answer": "المشتري هو أكبر كوكب في المجموعة الشمسية"},
    {"question": "كم يستغرق ضوء الشمس للوصول إلى الأرض؟", "answer": "يستغرق ضوء الشمس حوالي 8 دقائق و20 ثانية للوصول إلى الأرض"},
    
    # أسئلة عن الطقس والمناخ
    {"question": "ما هي أبرد قارة في العالم؟", "answer": "القطب الجنوبي (أنتاركتيكا) هو أبرد قارة في العالم"},
    {"question": "ما هي أحر صحراء في العالم؟", "answer": "الصحراء الكبرى في أفريقيا هي أحر صحراء في العالم"},
    {"question": "ما سبب تكون قوس قزح؟", "answer": "قوس قزح يتكون بسبب انكسار وتشتت ضوء الشمس في قطرات الماء"},
    
    # أسئلة تقنية بسيطة
    {"question": "ما هو أشهر محرك بحث في العالم؟", "answer": "جوجل هو أشهر محرك بحث في العالم"},
    {"question": "متى تم إطلاق الإنترنت للجمهور؟", "answer": "تم إطلاق الإنترنت للجمهور في بداية التسعينات"},
    {"question": "ما هو أول موقع في التاريخ؟", "answer": "أول موقع في التاريخ كان info.cern.ch في عام 1990"},
    
    # أسئلة اقتصادية بسيطة
    {"question": "ما هي عملة اليابان؟", "answer": "الين الياباني هو عملة اليابان"},
    {"question": "ما هي عملة بريطانيا؟", "answer": "الجنيه الإسترليني هو عملة بريطانيا"},
    {"question": "ما هي عملة أمريكا؟", "answer": "الدولار الأمريكي هو عملة أمريكا"},
    {"question": "ما هي العملة الأوروبية المشتركة؟", "answer": "اليورو هو العملة الأوروبية المشتركة"}
]import json
import random

# إعدادات التقسيم الجديدة - 100,000 سؤال
RESPONSES_PER_ARRAY = 500
NUMBER_OF_ARRAYS = 200  # 200 × 500 = 100,000 سؤال
TOTAL_RESPONSES = RESPONSES_PER_ARRAY * NUMBER_OF_ARRAYS

# قوائم البيانات الأساسية لتوليد محتوى متنوع ومفيد
COUNTRIES_CAPITALS = {
    # الشرق الأوسط وشمال أفريقيا
    "مصر": "القاهرة", "السعودية": "الرياض", "الإمارات": "أبو ظبي",
    "الكويت": "الكويت", "قطر": "الدوحة", "البحرين": "المنامة",
    "عمان": "مسقط", "الأردن": "عمان", "لبنان": "بيروت",
    "سوريا": "دمشق", "العراق": "بغداد", "فلسطين": "القدس",
    "المغرب": "الرباط", "الجزائر": "الجزائر", "تونس": "تونس",
    "ليبيا": "طرابلس", "السودان": "الخرطوم", "اليمن": "صنعاء",
    "موريتانيا": "نواكشوط", "جيبوتي": "جيبوتي", "الصومال": "مقديشو",
    
    # أوروبا
    "فرنسا": "باريس", "ألمانيا": "برلين", "إيطاليا": "روما",
    "إسبانيا": "مدريد", "البرتغال": "لشبونة", "إنجلترا": "لندن",
    "روسيا": "موسكو", "تركيا": "أنقرة", "هولندا": "أمستردام",
    "بلجيكا": "بروكسل", "سويسرا": "برن", "النمسا": "فيينا",
    "اليونان": "أثينا", "بولندا": "وارسو", "التشيك": "براغ",
    "المجر": "بودابست", "رومانيا": "بوخارست", "بلغاريا": "صوفيا",
    "كرواتيا": "زغرب", "صربيا": "بلغراد", "السويد": "ستوكهولم",
    "النرويج": "أوسلو", "فنلندا": "هلسنكي", "الدنمارك": "كوبنهاجن",
    "أيسلندا": "ريكيافيك", "أيرلندا": "دبلن", "البرتغال": "لشبونة",
    "مالطا": "فاليتا", "قبرص": "نيقوسيا", "لوكسمبورغ": "لوكسمبورغ",
    "موناكو": "موناكو", "ليختنشتاين": "فادوز", "أندورا": "أندورا لا فيلا",
    "سان مارينو": "سان مارينو", "الفاتيكان": "الفاتيكان",
    
    # آسيا
    "اليابان": "طوكيو", "الصين": "بكين", "الهند": "نيودلهي",
    "كوريا الجنوبية": "سيؤول", "كوريا الشمالية": "بيونغ يانغ",
    "تايلاند": "بانكوك", "فيتنام": "هانوي", "كمبوديا": "بنوم بنه",
    "لاوس": "فيينتيان", "ميانمار": "نايبيداو", "إندونيسيا": "جاكرتا",
    "ماليزيا": "كوالالمبور", "الفلبين": "مانيلا", "سنغافورة": "سنغافورة",
    "بنغلاديش": "دكا", "باكستان": "إسلام آباد", "أفغانستان": "كابل",
    "إيران": "طهران", "كازاخستان": "نور سلطان", "أوزبكستان": "طشقند",
    "تركمانستان": "عشق آباد", "قيرغيزستان": "بيشكيك", "طاجيكستان": "دوشانبه",
    "منغوليا": "أولان باتور", "نيبال": "كاتماندو", "بوتان": "تيمفو",
    "سريلانكا": "كولومبو", "المالديف": "ماليه", "بروناي": "بندر سيري بيغاوان",
    
    # الأمريكتين
    "أمريكا": "واشنطن", "كندا": "أوتاوا", "البرازيل": "برازيليا",
    "الأرجنتين": "بوينس آيرس", "المكسيك": "مكسيكو سيتي",
    "تشيلي": "سانتياجو", "كولومبيا": "بوغوتا", "فنزويلا": "كاراكاس",
    "بيرو": "ليما", "الإكوادور": "كيتو", "بوليفيا": "لاباز",
    "باراجواي": "أسونسيون", "أوروغواي": "مونتيفيديو", "جويانا": "جورج تاون",
    "سورينام": "باراماريبو", "جويانا الفرنسية": "كايين", "كوبا": "هافانا",
    "جامايكا": "كينغستون", "هايتي": "بورت أو برنس", "جمهورية الدومينيكان": "سانتو دومينغو",
    "غواتيمالا": "مدينة غواتيمالا", "هندوراس": "تيغوسيغالبا", "السلفادور": "سان سلفادور",
    "نيكاراغوا": "ماناغوا", "كوستاريكا": "سان خوسيه", "بنما": "بنما سيتي",
    
    # أفريقيا وأوقيانوسيا
    "جنوب أفريقيا": "كيب تاون", "نيجيريا": "أبوجا", "كينيا": "نيروبي",
    "إثيوبيا": "أديس أبابا", "غانا": "أكرا", "أوغندا": "كمبالا",
    "تنزانيا": "دودوما", "الكاميرون": "ياوندي", "مدغشقر": "أنتاناناريفو",
    "موزمبيق": "مابوتو", "أنغولا": "لواندا", "زامبيا": "لوساكا",
    "زيمبابوي": "هراري", "بوتسوانا": "جابورون", "ناميبيا": "ويندهوك",
    "مالي": "باماكو", "بركينا فاسو": "واغادوغو", "النيجر": "نيامي",
    "تشاد": "أنجامينا", "السنغال": "داكار", "ساحل العاج": "ياموسوكرو",
    "غينيا": "كوناكري", "سيراليون": "فري تاون", "ليبيريا": "مونروفيا",
    "أستراليا": "كانبرا", "نيوزيلندا": "ويلينغتون", "بابوا غينيا الجديدة": "بورت مورسبي",
    "فيجي": "سوفا", "ساموا": "آبيا", "تونغا": "نوكو ألوفا"
}

INVENTIONS_INVENTORS = {
    # اختراعات تكنولوجية
    "الهاتف": "ألكسندر جراهام بيل", "الكهرباء": "توماس أديسون",
    "الحاسوب": "تشارلز باباج", "الإنترنت": "تيم بيرنرز لي",
    "التلفزيون": "جون لوجي بيرد", "الراديو": "جوليلمو ماركوني",
    "اللمبة الكهربائية": "توماس أديسون", "المطبعة": "يوهانس جوتنبرغ",
    "الليزر": "ثيودور مايمان", "الأشعة السينية": "فيلهلم رونتجن",
    "الترانزستور": "جون بردين", "الميكروسكوب": "أنتون فان ليوينهوك",
    "التلسكوب": "غاليليو غاليلي", "البوصلة": "الصينيون القدماء",
    "البارود": "الصينيون القدماء", "الورق": "تساي لون",
    
    # اختراعات النقل
    "الطائرة": "الأخوان رايت", "السيارة": "كارل بنز",
    "القطار": "ريتشارد تريفيثيك", "الدراجة": "كارل درايس",
    "المحرك البخاري": "جيمس واط", "المروحية": "إيغور سيكورسكي",
    "الغواصة": "كورنيليوس دريبل", "المنطاد": "الأخوان مونتجولفييه",
    "الصاروخ": "روبرت جودارد", "السفينة البخارية": "روبرت فولتون",
    
    # اختراعات طبية
    "البنسلين": "ألكسندر فليمنغ", "اللقاحات": "إدوارد جينر",
    "المضادات الحيوية": "ألكسندر فليمنغ", "أشعة إكس": "فيلهلم رونتجن",
    "التخدير": "وليام مورتون", "القلب الاصطناعي": "بول وينشيل",
    "جهاز التنفس الاصطناعي": "فيليب درينكر", "زراعة الأعضاء": "جوزيف موراي",
    "الأنسولين": "فريديريك بانتنج", "المكواة الكهربائية للعلاج": "بوفيري",
    
    # اختراعات منزلية وتطبيقية
    "النظارات": "سلفينو أرماتي", "الكاميرا": "جوزيف نيسيفور نيبس",
    "المايكرويف": "بيرسي سبنسر", "الثلاجة": "جاكوب بيركنز",
    "المكيف": "ويليس كاريير", "المكنسة الكهربائية": "هوبرت بوث",
    "الغسالة": "ألفا فيشر", "الخلاط الكهربائي": "ستيفن بوبلوسكي",
    "الفرن الكهربائي": "توماس أهيرن", "ماكينة الخياطة": "إلياس هو",
    "ماكينة القهوة": "لويجي بيتزيني", "الجيتار الكهربائي": "أدولف ريكنباكر",
    
    # اختراعات حديثة
    "الهاتف المحمول": "مارتن كوبر", "الآي فون": "ستيف جوبز",
    "فيسبوك": "مارك زوكربيرغ", "جوجل": "لاري بيج وسيرجي برين",
    "أمازون": "جيف بيزوس", "تسلا": "إيلون ماسك",
    "يوتيوب": "تشاد هيرلي", "تويتر": "جاك دورسي",
    "واتساب": "بريان أكتون", "إنستغرام": "كيفن سيستروم",
    "أوبر": "ترافيس كالانيك", "إيباي": "بيير أوميديار"
}

SCIENTIFIC_CONCEPTS = {
    # فيزياء
    "الجاذبية": "قوة الجذب بين الأجسام التي لها كتلة، وهي المسؤولة عن حركة الكواكب والأقمار",
    "النسبية": "نظرية أينشتاين التي غيرت فهمنا للزمان والمكان والجاذبية",
    "الكوانتم": "أصغر وحدة من الطاقة أو المادة يمكن أن توجد بشكل منفصل",
    "الكهرومغناطيسية": "القوة التي تحكم التفاعل بين الجسيمات المشحونة كهربائياً",
    "الضوء": "شكل من أشكال الطاقة الكهرومغناطيسية المرئية للعين البشرية",
    "الصوت": "موجات اهتزازية تنتقل عبر الهواء أو المواد الأخرى وتصل إلى الأذن",
    "الحرارة": "شكل من أشكال الطاقة ينتقل من الأجسام الساخنة إلى الباردة",
    "الطاقة": "القدرة على إنجاز عمل أو إحداث تغيير في النظام",
    
    # كيمياء
    "الذرة": "أصغر وحدة في المادة تحتفظ بخصائص العنصر الكيميائي",
    "الجزيء": "مجموعة من الذرات المترابطة تشكل أصغر وحدة من المركب",
    "التفاعل الكيميائي": "عملية تكسير وتكوين روابط بين الذرات لإنتاج مواد جديدة",
    "الحمض": "مادة تطلق أيونات الهيدروجين عند ذوبانها في الماء",
    "القاعدة": "مادة تتفاعل مع الأحماض وتقبل أيونات الهيدروجين",
    "الأكسدة": "عملية فقدان الإلكترونات أو زيادة الأكسجين في المادة",
    "الاختزال": "عملية كسب الإلكترونات أو فقدان الأكسجين من المادة",
    
    # أحياء
    "الحمض النووي": "المادة الوراثية التي تحمل المعلومات الجينية لجميع الكائنات الحية",
    "الخلية": "الوحدة الأساسية للحياة وأصغر وحدة في الكائن الحي",
    "البروتين": "جزيئات كبيرة تتكون من أحماض أمينية وتؤدي وظائف حيوية مهمة",
    "التمثيل الغذائي": "مجموعة العمليات الكيميائية التي تحدث في الخلايا للحفاظ على الحياة",
    "التطور": "عملية التغيير التدريجي في الكائنات الحية عبر الأجيال",
    "الوراثة": "انتقال الصفات من الآباء إلى الأبناء عبر الجينات",
    "البناء الضوئي": "عملية تحويل ضوء الشمس إلى طاقة كيميائية في النباتات",
    
    # تكنولوجيا
    "الذكاء الاصطناعي": "تقنية تمكن الحاسوب من محاكاة التفكير البشري وحل المشاكل المعقدة",
    "البرمجة": "عملية كتابة تعليمات للحاسوب بلغة يفهمها لتنفيذ مهام ووظائف محددة",
    "الإنترنت": "شبكة عالمية تربط مليارات الأجهزة حول العالم لتبادل المعلومات والبيانات",
    "البلوك تشين": "تقنية لحفظ البيانات بطريقة آمنة وموزعة لا يمكن تعديلها أو التلاعب بها",
    "الواقع الافتراضي": "تقنية تنشئ بيئة محاكاة تفاعلية ثلاثية الأبعاد",
    "الواقع المعزز": "تقنية تدمج العناصر الرقمية مع العالم الحقيقي",
    "إنترنت الأشياء": "شبكة من الأجهزة المتصلة التي تتبادل البيانات تلقائياً",
    
    # بيئة وطاقة
    "الطاقة المتجددة": "الطاقة المستمدة من مصادر طبيعية متجددة مثل الشمس والرياح والماء",
    "الاحتباس الحراري": "زيادة درجة حرارة الأرض بسبب زيادة غازات الدفيئة في الغلاف الجوي",
    "التنوع البيولوجي": "تنوع الحياة على الأرض من النباتات والحيوانات والكائنات الدقيقة",
    "التلوث": "إدخال مواد ضارة إلى البيئة مما يؤثر سلباً على الكائنات الحية",
    "الاستدامة": "استخدام الموارد بطريقة تلبي احتياجات الحاضر دون الإضرار بالمستقبل",
    
    # رياضيات
    "الجبر": "فرع من الرياضيات يستخدم الرموز والمتغيرات لحل المعادلات",
    "الهندسة": "علم دراسة الأشكال والمساحات والحجوم والعلاقات المكانية",
    "الإحصاء": "علم جمع وتحليل وتفسير البيانات العددية",
    "التفاضل والتكامل": "فرع من الرياضيات يدرس معدلات التغيير والمساحات تحت المنحنيات",
    "نظرية الاحتمال": "دراسة إمكانية حدوث الأحداث والتنبؤ بالنتائج"
}

SPORTS_WINNERS = {
    "كأس العالم 2022": "الأرجنتين", "كأس العالم 2018": "فرنسا",
    "كأس العالم 2014": "ألمانيا", "كأس العالم 2010": "إسبانيا",
    "بطولة أوروبا 2021": "إيطاليا", "كوبا أمريكا 2021": "الأرجنتين",
    "دوري أبطال أوروبا 2023": "مانشستر سيتي", "الدوري الإنجليزي 2023": "مانشستر سيتي",
    "أولمبياد طوكيو 2021": "الولايات المتحدة", "كأس الأمم الأفريقية 2021": "السنغال",
    "دوري أبطال آسيا 2023": "الهلال السعودي", "كأس آسيا 2019": "قطر",
    "كأس العرب 2021": "الجزائر", "دوري أبطال أفريقيا 2023": "الأهلي المصري"
}

WORLD_RECORDS = {
    "أطول نهر في العالم": "نهر النيل بطول 6650 كيلومتر",
    "أكبر محيط في العالم": "المحيط الهادئ",
    "أعلى قمة في العالم": "جبل إيفرست بارتفاع 8848 متر",
    "أكبر صحراء في العالم": "الصحراء الكبرى في أفريقيا",
    "أعمق نقطة في المحيطات": "خندق ماريانا في المحيط الهادئ",
    "أكبر دولة في العالم": "روسيا بمساحة 17.1 مليون كيلومتر مربع",
    "أصغر دولة في العالم": "الفاتيكان بمساحة 0.17 ميل مربع",
    "أكثر دولة سكاناً": "الصين بأكثر من 1.4 مليار نسمة",
    "أطول جسر في العالم": "جسر دانيانغ-كونشان الكبير في الصين",
    "أعلى مبنى في العالم": "برج خليفة في دبي بارتفاع 828 متر"
}

FAMOUS_PEOPLE = {
    "محمد صلاح": "لاعب كرة قدم مصري يلعب في ليفربول، من أفضل اللاعبين في العالم",
    "ليونيل ميسي": "لاعب أرجنتيني، فاز بكأس العالم 2022 ويعتبر من أعظم اللاعبين",
    "كريستيانو رونالدو": "لاعب برتغالي، من أعظم لاعبي كرة القدم في التاريخ",
    "ألبرت أينشتاين": "عالم فيزياء ألماني وضع نظرية النسبية وغير فهمنا للكون",
    "إسحاق نيوتن": "عالم إنجليزي وضع قوانين الحركة والجاذبية الأساسية",
    "محمد علي كلاي": "أعظم ملاكم في التاريخ، معروف بقوته وشخصيته الكاريزمية",
    "مارك زوكربيرغ": "مؤسس فيسبوك وواحد من أهم رواد التكنولوجيا",
    "ستيف جوبز": "مؤسس شركة أبل وأحد رواد ثورة الحاسوب الشخصي",
    "بيل غيتس": "مؤسس مايكروسوفت وأحد أغنى أشخاص العالم",
    "إيلون ماسك": "رائد أعمال ومؤسس تسلا وسبيس إكس"
}

COLORS_MEANINGS = {
    "الأحمر": "لون الطاقة والحيوية والحب والشغف",
    "الأزرق": "لون الهدوء والثقة والاستقرار والسلام",
    "الأخضر": "لون الطبيعة والنمو والتوازن والهدوء",
    "الأصفر": "لون السعادة والتفاؤل والطاقة الإيجابية",
    "البرتقالي": "لون الحماس والإبداع والدفء",
    "البنفسجي": "لون الروحانية والإبداع والغموض",
    "الأسود": "لون الأناقة والقوة والغموض",
    "الأبيض": "لون النقاء والصفاء والبساطة",
    "الوردي": "لون الحب والحنان والأنوثة",
    "البني": "لون الطبيعة والاستقرار والموثوقية"
}

ANIMALS_INFO = {
    "الأسد": "ملك الغابة، من أقوى الحيوانات المفترسة ويعيش في مجموعات",
    "الفيل": "أكبر الثدييات البرية، يتميز بذكائه وذاكرته القوية",
    "الدولفين": "من أذكى الحيوانات البحرية، يتواصل بالأصوات المعقدة",
    "النمر": "أسرع الحيوانات البرية، يمكنه الوصول لسرعة 120 كم/ساعة",
    "الحوت الأزرق": "أكبر حيوان في العالم، يمكن أن يصل طوله إلى 30 متراً",
    "النحلة": "حشرة مهمة للبيئة، تنتج العسل وتلقح النباتات",
    "القرش": "سمك مفترس قديم، موجود منذ 400 مليون سنة",
    "البطريق": "طائر لا يطير لكنه سباح ماهر في المياه الباردة",
    "الزرافة": "أطول الحيوانات البرية، يمكن أن يصل طولها إلى 6 أمتار",
    "الكنغر": "حيوان أسترالي يتنقل بالقفز ويحمل صغاره في جرابه"
}

# قوالب الأسئلة والأجوبة
QUESTION_TEMPLATES = {
    "capitals": [
        "ما هي عاصمة {}؟",
        "ما عاصمة {}؟",
        "عاصمة {} هي؟",
        "أين تقع عاصمة {}؟",
        "ما اسم عاصمة {}؟"
    ],
    "inventors": [
        "من هو مخترع {}؟",
        "من اخترع {}؟",
        "من قام باختراع {}؟",
        "من يعتبر مخترع {}؟",
        "من ابتكر {}؟"
    ],
    "definitions": [
        "ما هو {}؟",
        "عرف {}؟",
        "اشرح مفهوم {}",
        "ما المقصود بـ{}؟",
        "وضح معنى {}"
    ],
    "sports": [
        "من فاز بـ{}؟",
        "من حصل على {}؟",
        "من الفائز بـ{}؟",
        "من نال {}؟",
        "من أحرز {}؟"
    ],
    "records": [
        "ما هو {}؟",
        "أين يقع {}؟",
        "كم يبلغ {}؟",
        "ما هي {}؟",
        "اذكر معلومات عن {}"
    ],
    "people": [
        "من هو {}؟",
        "عرفني بـ{}",
        "اذكر معلومات عن {}",
        "ماذا تعرف عن {}؟",
        "أخبرني عن {}"
    ],
    "colors": [
        "ماذا يرمز اللون {}؟",
        "ما معنى اللون {}؟",
        "ما دلالة اللون {}؟",
        "اللون {} يعني؟",
        "ما مدلول اللون {}؟"
    ],
    "animals": [
        "ما هو {}؟",
        "عرفني بحيوان {}",
        "اذكر معلومات عن {}",
        "ماذا تعرف عن {}؟",
        "أخبرني عن حيوان {}"
    ]
}

GENERAL_QA = [
    {"question": "كم عدد أيام السنة؟", "answer": "السنة العادية 365 يوماً، والسنة الكبيسة 366 يوماً"},
    {"question": "كم عدد قارات العالم؟", "answer": "عدد قارات العالم 7 قارات: آسيا، أفريقيا، أوروبا، أمريكا الشمالية، أمريكا الجنوبية، أستراليا، والقطب الجنوبي"},
    {"question": "ما هي أكبر قارة في العالم؟", "answer": "آسيا هي أكبر قارة في العالم من حيث المساحة وعدد السكان"},
    {"question": "كم عدد المحيطات في العالم؟", "answer": "عدد المحيطات في العالم 5: الهادئ، الأطلسي، الهندي، المتجمد الشمالي، والمتجمد الجنوبي"},
    {"question": "ما هي أكبر دولة عربية؟", "answer": "الجزائر هي أكبر دولة عربية من حيث المساحة"},
    {"question": "كم عدد عضلات جسم الإنسان؟", "answer": "جسم الإنسان يحتوي على حوالي 600 عضلة"},
    {"question": "ما هي أسرع الحيوانات؟", "answer": "النمر هو أسرع الحيوانات البرية بسرعة تصل إلى 120 كم/ساعة"},
    {"question": "كم عدد عظام جسم الإنسان؟", "answer": "جسم الإنسان البالغ يحتوي على 206 عظمة"},
    {"question": "ما هي عاصمة العالم؟", "answer": "لا توجد عاصمة رسمية للعالم، لكن نيويورك تعتبر مركزاً عالمياً مهماً"},
    {"question": "كم عدد أسنان الإنسان البالغ؟", "answer": "الإنسان البالغ لديه 32 سناً"}
]

GREETINGS_QA = [
    {"question": "مرحبا", "answer": "مرحباً بك! 😊 كيف يمكنني مساعدتك اليوم؟"},
    {"question": "السلام عليكم", "answer": "وعليكم السلام ورحمة الله وبركاته 🕊️ أهلاً وسهلاً بك"},
    {"question": "صباح الخير", "answer": "صباح الخير! نتمنى لك يوماً سعيداً ومليئاً بالإنجازات ☀️"},
    {"question": "مساء الخير", "answer": "مساء الخير! كيف كان يومك؟ 🌅"},
    {"question": "كيف حالك", "answer": "بخير والحمد لله! شكراً لسؤالك، كيف حالك أنت؟ 😊"},
    {"question": "شكرا", "answer": "عفواً! دائماً في الخدمة 🙏 هل تحتاج مساعدة أخرى؟"},
    {"question": "أهلا", "answer": "أهلاً وسهلاً! مرحباً بك 🌟"},
    {"question": "تصبح على خير", "answer": "وأنت من أهله! تصبح على خير وأحلام سعيدة 🌙"}
]

def generate_single_array_data(array_size):
    """
    توليد مصفوفة واحدة من الأسئلة والأجوبة.
    """
    data = []
    
    # إضافة بعض التحيات والأسئلة العامة (30 سؤال لكل مصفوفة)
    base_questions = GREETINGS_QA + GENERAL_QA
    selected_base = random.sample(base_questions, min(30, len(base_questions)))
    data.extend(selected_base)
    
    # حساب العدد المتبقي
    remaining = array_size - len(data)
    
    # توزيع الأسئلة على الفئات المختلفة
    categories = [
        ("capitals", COUNTRIES_CAPITALS),
        ("inventors", INVENTIONS_INVENTORS), 
        ("definitions", SCIENTIFIC_CONCEPTS),
        ("sports", SPORTS_WINNERS),
        ("records", WORLD_RECORDS),
        ("people", FAMOUS_PEOPLE),
        ("colors", COLORS_MEANINGS),
        ("animals", ANIMALS_INFO)
    ]
    
    # توزيع متوازن للأسئلة
    base_questions_per_category = remaining // len(categories)
    extra_questions = remaining % len(categories)
    
    for i, (category, data_dict) in enumerate(categories):
        # إضافة أسئلة إضافية للفئات الأولى إذا كان هناك باقي
        questions_for_this_category = base_questions_per_category
        if i < extra_questions:
            questions_for_this_category += 1
        
        templates = QUESTION_TEMPLATES[category]
        items = list(data_dict.items())
        
        # إنتاج أسئلة متنوعة لكل فئة
        for j in range(questions_for_this_category):
            # اختيار عنصر وقالب بشكل عشوائي
            key, value = random.choice(items)
            template = random.choice(templates)
            
            question = template.format(key)
            
            # إضافة تنويع في الأسئلة لتجنب التكرار
            if j > 0 and j % 10 == 0:
                # إضافة أسئلة مركبة أحياناً
                if category == "capitals" and len(items) > 1:
                    second_country = random.choice(items)[0]
                    question = f"ما الفرق بين عاصمة {key} وعاصمة {second_country}؟"
                    answer = f"عاصمة {key} هي {value}، بينما عاصمة {second_country} هي {data_dict[second_country]} 🏛️"
                elif category == "inventors" and len(items) > 1:
                    question = f"متى اخترع {value} {key}؟"
                    answer = f"{value} هو مخترع {key} 🔬"
            
            if 'answer' not in locals():
                # تخصيص الإجابات حسب النوع
                if category == "capitals":
                    answer = f"عاصمة {key} هي {value} 🏛️"
                elif category == "inventors":
                    answer = f"مخترع {key} هو {value} 🔬"
                elif category == "definitions":
                    answer = f"{key}: {value} 🧠"
                elif category == "sports":
                    answer = f"الفائز بـ{key} هو {value} 🏆"
                elif category == "records":
                    answer = f"{key} هو {value} 🌍"
                elif category == "people":
                    answer = f"{key}: {value} 👨‍💼"
                elif category == "colors":
                    answer = f"اللون {key}: {value} 🎨"
                elif category == "animals":
                    answer = f"{key}: {value} 🐾"
            
            data.append({
                "question": question,
                "answer": answer,
                "category": category
            })
            
            # إعادة تعيين answer للدورة التالية
            if 'answer' in locals():
                del answer
    
    # إضافة أسئلة متنوعة إضافية إذا لزم الأمر
    while len(data) < array_size:
        category, data_dict = random.choice(categories)
        templates = QUESTION_TEMPLATES[category]
        key, value = random.choice(list(data_dict.items()))
        template = random.choice(templates)
        
        question = template.format(key)
        answer = f"{value}"
        
        data.append({
            "question": question,
            "answer": answer,
            "category": category
        })
    
    # خلط البيانات للحصول على توزيع عشوائي
    random.shuffle(data)
    
    return data[:array_size]

def generate_arrays_data():
    """
    توليد 200 مصفوفة، كل واحدة تحتوي على 500 رد = 100,000 سؤال وجواب.
    """
    arrays_data = {}
    
    print(f"🚀 بدء توليد {NUMBER_OF_ARRAYS} مصفوفة، كل واحدة تحتوي على {RESPONSES_PER_ARRAY} رد...")
    print(f"📊 إجمالي الأسئلة المطلوبة: {TOTAL_RESPONSES:,} سؤال وجواب")
    print("⏳ هذه العملية قد تستغرق عدة دقائق...")
    
    for i in range(1, NUMBER_OF_ARRAYS + 1):
        if i % 20 == 0:  # تقرير التقدم كل 20 مصفوفة
            print(f"⏳ تم إنتاج {i}/{NUMBER_OF_ARRAYS} مصفوفة... ({(i/NUMBER_OF_ARRAYS)*100:.1f}%)")
        
        array_name = f"responses_array_{i}"
        array_data = generate_single_array_data(RESPONSES_PER_ARRAY)
        arrays_data[array_name] = array_data
    
    print(f"✅ تم إنتاج جميع المصفوفات بنجاح!")
    return arrays_data

def save_arrays_to_files(arrays_data):
    """
    حفظ المصفوفات في ملفات منفصلة وملف موحد.
    """
    try:
        # حفظ كل مصفوفة في ملف منفصل
        for array_name, array_data in arrays_data.items():
            filename = f"{array_name}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(array_data, f, ensure_ascii=False, indent=2)
            print(f"💾 تم حفظ {filename}")
        
        # حفظ جميع المصفوفات في ملف واحد
        with open('all_responses_arrays.json', 'w', encoding='utf-8') as f:
            json.dump(arrays_data, f, ensure_ascii=False, indent=2)
        
        # إحصائيات شاملة
        total_questions = sum(len(array_data) for array_data in arrays_data.values())
        print(f"\n📊 الإحصائيات النهائية:")
        print(f"   • عدد المصفوفات: {len(arrays_data)}")
        print(f"   • إجمالي الأسئلة: {total_questions:,}")
        print(f"   • متوسط الأسئلة لكل مصفوفة: {total_questions // len(arrays_data)}")
        
        # حفظ نسخة مبسطة للبوت
        simplified_data = {}
        for array_name, array_data in arrays_data.items():
            simplified_data[array_name] = {}
            for item in array_data:
                simplified_data[array_name][item['question'].lower().strip()] = item['answer']
        
        with open('responses_arrays_simple.json', 'w', encoding='utf-8') as f:
            json.dump(simplified_data, f, ensure_ascii=False, indent=2)
        
        print(f"\n🎉 تم الانتهاء بنجاح!")
        print("📁 الملفات المُنشأة:")
        print("   • all_responses_arrays.json - جميع المصفوفات في ملف واحد")
        print("   • responses_arrays_simple.json - نسخة مبسطة للبوت")
        for i in range(1, NUMBER_OF_ARRAYS + 1):
            print(f"   • responses_array_{i}.json - المصفوفة رقم {i}")
            
    except Exception as e:
        print(f"❌ حدث خطأ عند حفظ الملفات: {e}")

def create_python_file_with_arrays():
    """
    إنشاء ملف Python يحتوي على المصفوفات كمتغيرات.
    """
    arrays_data = generate_arrays_data()
    
    python_content = '''# ملف قاعدة البيانات - 10 مصفوفات × 500 رد
# تم إنتاج هذا الملف تلقائياً

'''
    
    for i, (array_name, array_data) in enumerate(arrays_data.items(), 1):
        python_content += f"# المصفوفة رقم {i} - {len(array_data)} عنصر\n"
        python_content += f"{array_name.upper()} = [\n"
        
        for item in array_data:
            question = item['question'].replace('"', '\\"')
            answer = item['answer'].replace('"', '\\"')
        print("✅ تم إنشاء الملف الرئيسي: responses_main.py")
    print(f"\n🎯 تم إنشاء {file_count} ملف Python + ملف رئيسي")
    print("📁 الملفات المُنشأة:")
    print("   • responses_main.py - الملف الرئيسي")
    for i in range(1, file_count + 1):
        print(f"   • responses_arrays_file_{i}.py")
    
    return arrays_data

def create_optimized_webhook_data():
    """
    إنشاء ملف JSON محسن للويب هوك مع فهرسة ذكية.
    """
    print("🔧 إنشاء ملف JSON محسن للويب هوك...")
    arrays_data = generate_arrays_data()
    
    # إنشاء فهرس ذكي للبحث السريع
    optimized_data = {
        "responses": {},
        "keywords": {},  # فهرس الكلمات المفتاحية
        "categories": {},  # فهرس الفئات
        "statistics": {
            "total_questions": 0,
            "total_arrays": len(arrays_data),
            "categories_count": {}
        }
    }
    
    question_id = 1
    
    for array_name, array_data in arrays_data.items():
        for item in array_data:
            question = item['question'].lower().strip()
            answer = item['answer']
            category = item.get('category', 'general')
            
            # إضافة الاستجابة الأساسية
            response_key = f"q_{question_id}"
            optimized_data["responses"][response_key] = {
                "question": question,
                "answer": answer,
                "category": category,
                "array": array_name
            }
            
            # إنشاء فهرس الكلمات المفتاحية
            keywords = question.split()
            for keyword in keywords:
                keyword = keyword.strip("؟.,!()[]{}\"'")
                if len(keyword) > 2:  # تجاهل الكلمات القصيرة جداً
                    if keyword not in optimized_data["keywords"]:
                        optimized_data["keywords"][keyword] = []
                    optimized_data["keywords"][keyword].append(response_key)
            
            # فهرس الفئات
            if category not in optimized_data["categories"]:
                optimized_data["categories"][category] = []
            optimized_data["categories"][category].append(response_key)
            
            # إحصائيات
            if category not in optimized_data["statistics"]["categories_count"]:
                optimized_data["statistics"]["categories_count"][category] = 0
            optimized_data["statistics"]["categories_count"][category] += 1
            
            question_id += 1
    
    optimized_data["statistics"]["total_questions"] = question_id - 1
    
    # حفظ النسخة المحسنة
    with open('responses_optimized.json', 'w', encoding='utf-8') as f:
        json.dump(optimized_data, f, ensure_ascii=False, indent=2)
    
    # إنشاء نسخة مبسطة للويب هوك التقليدي
    simple_data = {}
    for response_key, data in optimized_data["responses"].items():
        simple_data[data["question"]] = data["answer"]
    
    with open('responses_simple_100k.json', 'w', encoding='utf-8') as f:
        json.dump(simple_data, f, ensure_ascii=False, indent=2)
    
    print(f"✅ تم إنشاء ملفات JSON محسنة:")
    print(f"   • responses_optimized.json - نسخة محسنة مع فهرسة")
    print(f"   • responses_simple_100k.json - نسخة بسيطة للويب هوك")
    print(f"📊 إحصائيات:")
    print(f"   • إجمالي الأسئلة: {optimized_data['statistics']['total_questions']:,}")
    print(f"   • الكلمات المفتاحية: {len(optimized_data['keywords']):,}")
    print(f"   • الفئات: {len(optimized_data['categories'])}")

if __name__ == "__main__":
    print("🚀 مولد قاعدة البيانات الضخمة - 100,000 سؤال وجواب")
    print("=" * 60)
    print(f"📊 المواصفات:")
    print(f"   • عدد المصفوفات: {NUMBER_OF_ARRAYS}")
    print(f"   • أسئلة لكل مصفوفة: {RESPONSES_PER_ARRAY}")
    print(f"   • إجمالي الأسئلة: {TOTAL_RESPONSES:,}")
    print("=" * 60)
    
    print("اختر نوع الملف المطلوب:")
    print("1. ملفات JSON منفصلة (200 ملف)")
    print("2. ملفات Python مع المصفوفات (4 ملفات)")
    print("3. ملف JSON محسن للويب هوك")
    print("4. كل الأنواع (الخيار الشامل)")
    
    choice = input("\nاختيارك (1، 2، 3، أو 4): ")
    
    if choice == "1":
        arrays_data = generate_arrays_data()
        save_arrays_to_files(arrays_data)
    elif choice == "2":
        create_python_file_with_arrays()
    elif choice == "3":
        create_optimized_webhook_data()
    elif choice == "4":
        print("\n🔥 بدء العملية الشاملة...")
        print("⚠️ تحذير: هذه العملية قد تستغرق 10-15 دقيقة!")
        print("⚠️ تأكد من توفر مساحة كافية على القرص الصلب (حوالي 500MB)")
        
        confirm = input("\nهل تريد المتابعة؟ (نعم/لا): ")
        if confirm.lower() in ['نعم', 'yes', 'y', 'ن']:
            print("\n📦 الخطوة 1/3: إنشاء ملفات JSON...")
            arrays_data = generate_arrays_data()
            save_arrays_to_files(arrays_data)
            
            print("\n🐍 الخطوة 2/3: إنشاء ملفات Python...")
            create_python_file_with_arrays()
            
            print("\n🔧 الخطوة 3/3: إنشاء ملف ويب هوك محسن...")
            create_optimized_webhook_data()
            
            print("\n🎉 تم الانتهاء من جميع العمليات بنجاح!")
            print("📁 تم إنشاء أكثر من 200 ملف يحتوي على 100,000 سؤال وجواب!")
        else:
            print("❌ تم إلغاء العملية.")
    else:
        print("❌ اختيار غير صحيح!")
        
    print("\n🎯 لاستخدام البيانات مع ويب هوك فيسبوك:")
    print("   • استخدم ملف responses_simple_100k.json للويب هوك العادي")
    print("   • أو استخدم responses_optimized.json للبحث المحسن")
    print("   • ارفع الملف في نفس مجلد ملف الويب هوك")
    print("   • قم بتحديث المسار في كود الويب هوك")
