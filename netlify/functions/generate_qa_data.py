import json
import random

# إعدادات التقسيم المحدثة
# زيادة عدد المصفوفات إلى 20
NUMBER_OF_ARRAYS = 20
# زيادة عدد الردود في كل مصفوفة لضمان أكثر من 5000 كلمة
RESPONSES_PER_ARRAY = 3000
TOTAL_RESPONSES = RESPONSES_PER_ARRAY * NUMBER_OF_ARRAYS

# قوائم البيانات الأساسية لتوليد محتوى متنوع ومفيد
# تم توسيع البيانات لتغطية عدد أكبر من الأسئلة
COUNTRIES_CAPITALS = {
    # الشرق الأوسط وشمال أفريقيا
    "مصر": "القاهرة", "السعودية": "الرياض", "الإمارات": "أبو ظبي",
    "الكويت": "الكويت", "قطر": "الدوحة", "البحرين": "المنامة",
    "عمان": "مسقط", "الأردن": "عمان", "لبنان": "بيروت",
    "سوريا": "دمشق", "العراق": "بغداد", "فلسطين": "القدس",
    "المغرب": "الرباط", "الجزائر": "الجزائر", "تونس": "تونس",
    "ليبيا": "طرابلس", "السودان": "الخرطوم", "اليمن": "صنعاء",
    "الصومال": "مقديشو", "جيبوتي": "جيبوتي", "موريتانيا": "نواكشوط",
    
    # أوروبا
    "فرنسا": "باريس", "ألمانيا": "برلين", "إيطاليا": "روما",
    "إسبانيا": "مدريد", "البرتغال": "لشبونة", "إنجلترا": "لندن",
    "روسيا": "موسكو", "تركيا": "أنقرة", "هولندا": "أمستردام",
    "بلجيكا": "بروكسل", "سويسرا": "برن", "النمسا": "فيينا",
    "اليونان": "أثينا", "بولندا": "وارسو", "التشيك": "براغ",
    "السويد": "ستوكهولم", "النرويج": "أوسلو", "فنلندا": "هلسنكي",
    "أوكرانيا": "كييف", "إيرلندا": "دبلن", "آيسلندا": "ريكيافيك",
    
    # آسيا
    "اليابان": "طوكيو", "الصين": "بكين", "الهند": "نيودلهي",
    "كوريا الجنوبية": "سيؤول", "تايلاند": "بانكوك", "فيتنام": "هانوي",
    "إندونيسيا": "جاكرتا", "ماليزيا": "كوالالمبور", "الفلبين": "مانيلا",
    "سنغافورة": "سنغافورة", "بنغلاديش": "دكا", "باكستان": "إسلام آباد",
    "إيران": "طهران", "أفغانستان": "كابل", "كازاخستان": "نور سلطان",
    
    # الأمريكتين
    "أمريكا": "واشنطن", "كندا": "أوتاوا", "البرازيل": "برازيليا",
    "الأرجنتين": "بوينس آيرس", "المكسيك": "مكسيكو سيتي",
    "تشيلي": "سانتياجو", "كولومبيا": "بوغوتا", "فنزويلا": "كاراكاس",
    "بيرو": "ليما", "كوبا": "هافانا", "الأوروغواي": "مونتيفيديو",
    
    # أفريقيا وأوقيانوسيا
    "جنوب أفريقيا": "كيب تاون", "نيجيريا": "أبوجا", "كينيا": "نيروبي",
    "إثيوبيا": "أديس أبابا", "غانا": "أكرا", "أوغندا": "كمبالا",
    "أستراليا": "كانبرا", "نيوزيلندا": "ويلينغتون", "موزمبيق": "مابوتو",
    "مدغشقر": "أنتاناناريفو", "ساحل العاج": "ياموسوكرو", "الكونغو": "برازافيل"
}

INVENTIONS_INVENTORS = {
    "الهاتف": "ألكسندر جراهام بيل", "الكهرباء": "توماس أديسون",
    "الطائرة": "الأخوان رايت", "السيارة": "كارل بنز",
    "الحاسوب": "تشارلز باباج", "الإنترنت": "تيم بيرنرز لي",
    "التلفزيون": "جون لوجي بيرد", "الراديو": "جوليلمو ماركوني",
    "اللمبة الكهربائية": "توماس أديسون", "المطبعة": "يوهانس جوتنبرغ",
    "المحرك البخاري": "جيمس واط", "البنسلين": "ألكسندر فليمنغ",
    "اللقاحات": "إدوارد جينر", "النظارات": "سلفينو أرماتي",
    "الكاميرا": "جوزيف نيسيفور نيبس", "المايكرويف": "بيرسي سبنسر",
    "الليزر": "ثيودور مايمان", "الأشعة السينية": "فيلهلم رونتجن",
    "المضادات الحيوية": "ألكسندر فليمنغ", "القطار": "ريتشارد تريفيثيك",
    "التلغراف": "صمويل مورس", "الآلة الحاسبة": "بليز باسكال",
    "الفاكس": "ألكسندر باين", "الخلايا الشمسية": "إدموند بيكيريل"
}

SCIENTIFIC_CONCEPTS = {
    "الجاذبية": "قوة الجذب بين الأجسام التي لها كتلة، وهي المسؤولة عن حركة الكواكب والأقمار",
    "الذكاء الاصطناعي": "تقنية تمكن الحاسوب من محاكاة التفكير البشري وحل المشاكل المعقدة",
    "الإنترنت": "شبكة عالمية تربط مليارات الأجهزة حول العالم لتبادل المعلومات والبيانات",
    "البرمجة": "عملية كتابة تعليمات للحاسوب بلغة يفهمها لتنفيذ مهام ووظائف محددة",
    "البلوك تشين": "تقنية لحفظ البيانات بطريقة آمنة وموزعة لا يمكن تعديلها أو التلاعب بها",
    "الطاقة المتجددة": "الطاقة المستمدة من مصادر طبيعية متجددة مثل الشمس والرياح والماء",
    "الحمض النووي": "المادة الوراثية التي تحمل المعلومات الجينية لجميع الكائنات الحية",
    "الضوء": "شكل من أشكال الطاقة الكهرومغناطيسية المرئية للعين البشرية",
    "الصوت": "موجات اهتزازية تنتقل عبر الهواء أو المواد الأخرى وتصل إلى الأذن",
    "الكهرومغناطيسية": "القوة التي تحكم التفاعل بين الجسيمات المشحونة كهربائياً",
    "الكوانتم": "أصغر وحدة من الطاقة أو المادة يمكن أن توجد بشكل منفصل",
    "النسبية": "نظرية أينشتاين التي غيرت فهمنا للزمان والمكان والجاذبية",
    "الخلايا الجذعية": "خلايا غير متخصصة يمكنها التطور إلى أنواع مختلفة من الخلايا",
    "المادة المظلمة": "مادة افتراضية لا تبعث أو تمتص الضوء، وتشكل جزءاً كبيراً من الكون",
    "الطاقة المظلمة": "شكل من أشكال الطاقة التي تسبب تسارع تمدد الكون"
}

SPORTS_WINNERS = {
    "كأس العالم 2022": "الأرجنتين", "كأس العالم 2018": "فرنسا",
    "كأس العالم 2014": "ألمانيا", "كأس العالم 2010": "إسبانيا",
    "بطولة أوروبا 2021": "إيطاليا", "كوبا أمريكا 2021": "الأرجنتين",
    "دوري أبطال أوروبا 2023": "مانشستر سيتي", "الدوري الإنجليزي 2023": "مانشستر سيتي",
    "أولمبياد طوكيو 2021": "الولايات المتحدة", "كأس الأمم الأفريقية 2021": "السنغال",
    "دوري أبطال آسيا 2023": "الهلال السعودي", "كأس آسيا 2019": "قطر",
    "كأس العرب 2021": "الجزائر", "دوري أبطال أفريقيا 2023": "الأهلي المصري",
    "كأس العالم للسيدات 2023": "إسبانيا", "كأس أمم أوروبا 2020": "إيطاليا",
    "كوبا أمريكا 2024": "الأرجنتين", "يورو 2024": "إسبانيا"
}

WORLD_RECORDS = {
    "أطول نهر في العالم": "نهر النيل بطول 6650 كيلومتر",
    "أكبر محيط في العالم": "المحيط الهادئ",
    "أعلى قمة في العالم": "جبل إيفرست بارتفاع 8848 متر",
    "أكبر صحراء في العالم": "الصحراء الكبرى في أفريقيا",
    "أعمق نقطة في المحيطات": "خندق ماريانا في المحيط الهادئ",
    "أكبر دولة في العالم": "روسيا بمساحة 17.1 مليون كيلومتر مربع",
    "أصغر دولة في العالم": "الفاتيكان بمساحة 0.17 ميل مربع",
    "أكثر دولة سكاناً": "الصين بأكثر من 1.4 مليار نسمة",
    "أطول جسر في العالم": "جسر دانيانغ-كونشان الكبير في الصين",
    "أعلى مبنى في العالم": "برج خليفة في دبي بارتفاع 828 متر",
    "أكبر جزيرة في العالم": "جرينلاند", "أكبر بحيرة في العالم": "بحر قزوين",
    "أسرع حيوان بري": "الفهد الصياد (الشيتا)"
}

FAMOUS_PEOPLE = {
    "محمد صلاح": "لاعب كرة قدم مصري يلعب في ليفربول، من أفضل اللاعبين في العالم",
    "ليونيل ميسي": "لاعب أرجنتيني، فاز بكأس العالم 2022 ويعتبر من أعظم اللاعبين",
    "كريستيانو رونالدو": "لاعب برتغالي، من أعظم لاعبي كرة القدم في التاريخ",
    "ألبرت أينشتاين": "عالم فيزياء ألماني وضع نظرية النسبية وغير فهمنا للكون",
    "إسحاق نيوتن": "عالم إنجليزي وضع قوانين الحركة والجاذبية الأساسية",
    "محمد علي كلاي": "أعظم ملاكم في التاريخ، معروف بقوته وشخصيته الكاريزمية",
    "مارك زوكربيرغ": "مؤسس فيسبوك وواحد من أهم رواد التكنولوجيا",
    "ستيف جوبز": "مؤسس شركة أبل وأحد رواد ثورة الحاسوب الشخصي",
    "بيل غيتس": "مؤسس مايكروسوفت وأحد أغنى أشخاص العالم",
    "إيلون ماسك": "رائد أعمال ومؤسس تسلا وسبيس إكس",
    "غاندي": "زعيم هندي قاد حركة استقلال الهند ضد الحكم البريطاني",
    "نيلسون مانديلا": "زعيم جنوب أفريقي ومناهض للفصل العنصري"
}

COLORS_MEANINGS = {
    "الأحمر": "لون الطاقة والحيوية والحب والشغف",
    "الأزرق": "لون الهدوء والثقة والاستقرار والسلام",
    "الأخضر": "لون الطبيعة والنمو والتوازن والهدوء",
    "الأصفر": "لون السعادة والتفاؤل والطاقة الإيجابية",
    "البرتقالي": "لون الحماس والإبداع والدفء",
    "البنفسجي": "لون الروحانية والإبداع والغموض",
    "الأسود": "لون الأناقة والقوة والغموض",
    "الأبيض": "لون النقاء والصفاء والبساطة",
    "الوردي": "لون الحب والحنان والأنوثة",
    "البني": "لون الطبيعة والاستقرار والموثوقية",
    "الرمادي": "لون الحيادية والهدوء",
    "الذهبي": "لون الثروة والنجاح والفخامة"
}

ANIMALS_INFO = {
    "الأسد": "ملك الغابة، من أقوى الحيوانات المفترسة ويعيش في مجموعات",
    "الفيل": "أكبر الثدييات البرية، يتميز بذكائه وذاكرته القوية",
    "الدولفين": "من أذكى الحيوانات البحرية، يتواصل بالأصوات المعقدة",
    "النمر": "أسرع الحيوانات البرية، يمكنه الوصول لسرعة 120 كم/ساعة",
    "الحوت الأزرق": "أكبر حيوان في العالم، يمكن أن يصل طوله إلى 30 متراً",
    "النحلة": "حشرة مهمة للبيئة، تنتج العسل وتلقح النباتات",
    "القرش": "سمك مفترس قديم، موجود منذ 400 مليون سنة",
    "البطريق": "طائر لا يطير لكنه سباح ماهر في المياه الباردة",
    "الزرافة": "أطول الحيوانات البرية، يمكن أن يصل طولها إلى 6 أمتار",
    "الكنغر": "حيوان أسترالي يتنقل بالقفز ويحمل صغاره في جرابه",
    "القط": "حيوان أليف من فصيلة السنوريات",
    "الكلب": "حيوان أليف من فصيلة الكلبيات ويتميز بالوفاء",
    "الفهد الصياد (الشيتا)": "أسرع حيوان بري في العالم"
}

# قوالب الأسئلة والأجوبة
QUESTION_TEMPLATES = {
    "capitals": [
        "ما هي عاصمة {}؟",
        "ما عاصمة {}؟",
        "عاصمة {} هي؟",
        "أين تقع عاصمة {}؟",
        "ما اسم عاصمة {}؟"
    ],
    "inventors": [
        "من هو مخترع {}؟",
        "من اخترع {}؟",
        "من قام باختراع {}؟",
        "من يعتبر مخترع {}؟",
        "من ابتكر {}؟"
    ],
    "definitions": [
        "ما هو {}؟",
        "عرف {}؟",
        "اشرح مفهوم {}",
        "ما المقصود بـ{}؟",
        "وضح معنى {}"
    ],
    "sports": [
        "من فاز بـ{}؟",
        "من حصل على {}؟",
        "من الفائز بـ{}؟",
        "من نال {}؟",
        "من أحرز {}؟"
    ],
    "records": [
        "ما هو {}؟",
        "أين يقع {}؟",
        "كم يبلغ {}؟",
        "ما هي {}؟",
        "اذكر معلومات عن {}"
    ],
    "people": [
        "من هو {}؟",
        "عرفني بـ{}",
        "اذكر معلومات عن {}",
        "ماذا تعرف عن {}؟",
        "أخبرني عن {}"
    ],
    "colors": [
        "ماذا يرمز اللون {}؟",
        "ما معنى اللون {}؟",
        "ما دلالة اللون {}؟",
        "اللون {} يعني؟",
        "ما مدلول اللون {}؟"
    ],
    "animals": [
        "ما هو {}؟",
        "عرفني بحيوان {}",
        "اذكر معلومات عن {}",
        "ماذا تعرف عن {}؟",
        "أخبرني عن حيوان {}"
    ]
}

GENERAL_QA = [
    {"question": "كم عدد أيام السنة؟", "answer": "السنة العادية 365 يوماً، والسنة الكبيسة 366 يوماً"},
    {"question": "كم عدد قارات العالم؟", "answer": "عدد قارات العالم 7 قارات: آسيا، أفريقيا، أوروبا، أمريكا الشمالية، أمريكا الجنوبية، أستراليا، والقطب الجنوبي"},
    {"question": "ما هي أكبر قارة في العالم؟", "answer": "آسيا هي أكبر قارة في العالم من حيث المساحة وعدد السكان"},
    {"question": "كم عدد المحيطات في العالم؟", "answer": "عدد المحيطات في العالم 5: الهادئ، الأطلسي، الهندي، المتجمد الشمالي، والمتجمد الجنوبي"},
    {"question": "ما هي أكبر دولة عربية؟", "answer": "الجزائر هي أكبر دولة عربية من حيث المساحة"},
    {"question": "كم عدد عضلات جسم الإنسان؟", "answer": "جسم الإنسان يحتوي على حوالي 600 عضلة"},
    {"question": "ما هي أسرع الحيوانات؟", "answer": "النمر هو أسرع الحيوانات البرية بسرعة تصل إلى 120 كم/ساعة"},
    {"question": "كم عدد عظام جسم الإنسان؟", "answer": "جسم الإنسان البالغ يحتوي على 206 عظمة"},
    {"question": "ما هي عاصمة العالم؟", "answer": "لا توجد عاصمة رسمية للعالم، لكن نيويورك تعتبر مركزاً عالمياً مهماً"},
    {"question": "كم عدد أسنان الإنسان البالغ؟", "answer": "الإنسان البالغ لديه 32 سناً"}
]

GREETINGS_QA = [
    {"question": "مرحبا", "answer": "مرحباً بك! 😊 كيف يمكنني مساعدتك اليوم؟"},
    {"question": "السلام عليكم", "answer": "وعليكم السلام ورحمة الله وبركاته 🕊️ أهلاً وسهلاً بك"},
    {"question": "صباح الخير", "answer": "صباح الخير! نتمنى لك يوماً سعيداً ومليئاً بالإنجازات ☀️"},
    {"question": "مساء الخير", "answer": "مساء الخير! كيف كان يومك؟ 🌅"},
    {"question": "كيف حالك", "answer": "بخير والحمد لله! شكراً لسؤالك، كيف حالك أنت؟ 😊"},
    {"question": "شكرا", "answer": "عفواً! دائماً في الخدمة 🙏 هل تحتاج مساعدة أخرى؟"},
    {"question": "أهلا", "answer": "أهلاً وسهلاً! مرحباً بك 🌟"},
    {"question": "تصبح على خير", "answer": "وأنت من أهله! تصبح على خير وأحلام سعيدة 🌙"}
]

def generate_single_array_data(array_size):
    """
    توليد مصفوفة واحدة من الأسئلة والأجوبة.
    """
    data = []
    
    # إضافة بعض التحيات والأسئلة العامة
    base_questions = GREETINGS_QA + GENERAL_QA
    data.extend(random.sample(base_questions, min(50, len(base_questions))))
    
    # حساب العدد المتبقي
    remaining = array_size - len(data)
    
    # توزيع الأسئلة على الفئات المختلفة
    categories = [
        ("capitals", COUNTRIES_CAPITALS),
        ("inventors", INVENTIONS_INVENTORS), 
        ("definitions", SCIENTIFIC_CONCEPTS),
        ("sports", SPORTS_WINNERS),
        ("records", WORLD_RECORDS),
        ("people", FAMOUS_PEOPLE),
        ("colors", COLORS_MEANINGS),
        ("animals", ANIMALS_INFO)
    ]
    
    questions_per_category = remaining // len(categories)
    
    for category, data_dict in categories:
        templates = QUESTION_TEMPLATES[category]
        items = list(data_dict.items())
        
        for i in range(questions_per_category):
            # اختيار عنصر وقالب بشكل عشوائي
            key, value = random.choice(items)
            template = random.choice(templates)
            
            question = template.format(key)
            
            # تخصيص الإجابات حسب النوع
            if category == "capitals":
                answer = f"عاصمة {key} هي {value} 🏛️"
            elif category == "inventors":
                answer = f"مخترع {key} هو {value} 🔬"
            elif category == "definitions":
                answer = f"{key}: {value} 🧠"
            elif category == "sports":
                answer = f"الفائز بـ{key} هو {value} 🏆"
            elif category == "records":
                answer = f"{key} هو {value} 🌍"
            elif category == "people":
                answer = f"{key}: {value} 👨‍💼"
            elif category == "colors":
                answer = f"اللون {key}: {value} 🎨"
            elif category == "animals":
                answer = f"{key}: {value} 🐾"
            
            data.append({
                "question": question,
                "answer": answer,
                "category": category
            })
    
    # إضافة أسئلة عشوائية إضافية لاستكمال العدد
    while len(data) < array_size:
        category, data_dict = random.choice(categories)
        templates = QUESTION_TEMPLATES[category]
        key, value = random.choice(list(data_dict.items()))
        template = random.choice(templates)
        
        question = template.format(key)
        answer = f"الإجابة: {value}"
        
        data.append({
            "question": question,
            "answer": answer,
            "category": category
        })
    
    # خلط البيانات للحصول على توزيع عشوائي
    random.shuffle(data)
    
    return data[:array_size]

def generate_arrays_data():
    """
    توليد المصفوفات بناءً على الإعدادات المحدثة.
    """
    arrays_data = {}
    
    print(f"🚀 بدء توليد {NUMBER_OF_ARRAYS} مصفوفات، كل واحدة تحتوي على {RESPONSES_PER_ARRAY} رد...")
    
    for i in range(1, NUMBER_OF_ARRAYS + 1):
        print(f"⏳ توليد المصفوفة رقم {i}...")
        
        array_name = f"responses_array_{i}"
        array_data = generate_single_array_data(RESPONSES_PER_ARRAY)
        arrays_data[array_name] = array_data
        
        # حساب إحصائيات للمصفوفة الحالية
        categories_count = {}
        for item in array_data:
            category = item.get('category', 'general')
            categories_count[category] = categories_count.get(category, 0) + 1
        
        print(f"✅ تم إنتاج المصفوفة {array_name} ({len(array_data)} سؤال)")
    
    return arrays_data

def save_arrays_to_files(arrays_data):
    """
    حفظ المصفوفات في ملفات منفصلة وملف موحد.
    """
    try:
        # حفظ كل مصفوفة في ملف منفصل
        for array_name, array_data in arrays_data.items():
            filename = f"{array_name}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(array_data, f, ensure_ascii=False, indent=2)
            print(f"💾 تم حفظ {filename}")
        
        # حفظ جميع المصفوفات في ملف واحد
        with open('all_responses_arrays.json', 'w', encoding='utf-8') as f:
            json.dump(arrays_data, f, ensure_ascii=False, indent=2)
        
        # إحصائيات شاملة
        total_questions = sum(len(array_data) for array_data in arrays_data.values())
        print(f"\n📊 الإحصائيات النهائية:")
        print(f"   • عدد المصفوفات: {len(arrays_data)}")
        print(f"   • إجمالي الأسئلة: {total_questions:,}")
        print(f"   • متوسط الأسئلة لكل مصفوفة: {total_questions // len(arrays_data)}")
        
        # حفظ نسخة مبسطة للبوت
        simplified_data = {}
        for array_name, array_data in arrays_data.items():
            simplified_data[array_name] = {}
            for item in array_data:
                simplified_data[array_name][item['question'].lower().strip()] = item['answer']
        
        with open('responses_arrays_simple.json', 'w', encoding='utf-8') as f:
            json.dump(simplified_data, f, ensure_ascii=False, indent=2)
        
        print(f"\n🎉 تم الانتهاء بنجاح!")
        print("📁 الملفات المُنشأة:")
        print("   • all_responses_arrays.json - جميع المصفوفات في ملف واحد")
        print("   • responses_arrays_simple.json - نسخة مبسطة للبوت")
        for i in range(1, NUMBER_OF_ARRAYS + 1):
            print(f"   • responses_array_{i}.json - المصفوفة رقم {i}")
            
    except Exception as e:
        print(f"❌ حدث خطأ عند حفظ الملفات: {e}")

def create_python_file_with_arrays():
    """
    إنشاء ملف Python يحتوي على المصفوفات كمتغيرات.
    """
    arrays_data = generate_arrays_data()
    
    python_content = '''# ملف قاعدة البيانات - 20 مصفوفة × 3000 رد
# تم إنتاج هذا الملف تلقائياً

'''
    
    for i, (array_name, array_data) in enumerate(arrays_data.items(), 1):
        python_content += f"# المصفوفة رقم {i} - {len(array_data)} عنصر\n"
        python_content += f"{array_name.upper()} = [\n"
        
        for item in array_data:
            python_content += f"    {json.dumps(item, ensure_ascii=False)},\n"
        
        python_content = python_content.rstrip(",\n") + "\n]\n\n"
        
    with open('arrays_database.py', 'w', encoding='utf-8') as f:
        f.write(python_content)
    
    print("✨ تم إنشاء ملف Python بالبيانات الجديدة: arrays_database.py")

if __name__ == "__main__":
    arrays_data = generate_arrays_data()
    save_arrays_to_files(arrays_data)
