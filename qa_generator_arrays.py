# coding=utf-8
import json
import random
import time
import os
from datetime import datetime

# إعدادات التقسيم الضخمة - 100,000 سؤال وجواب
RESPONSES_PER_ARRAY = 1000
NUMBER_OF_ARRAYS = 100
TOTAL_RESPONSES = RESPONSES_PER_ARRAY * NUMBER_OF_ARRAYS

# قواعد بيانات موسعة للوصول لمليون رد متنوع
COUNTRIES_CAPITALS = {
    # الشرق الأوسط وشمال أفريقيا
    "مصر": "القاهرة", "السعودية": "الرياض", "الإمارات": "أبو ظبي",
    "الكويت": "الكويت", "قطر": "الدوحة", "البحرين": "المنامة",
    "عمان": "مسقط", "الأردن": "عمان", "لبنان": "بيروت",
    "سوريا": "دمشق", "العراق": "بغداد", "فلسطين": "القدس",
    "المغرب": "الرباط", "الجزائر": "الجزائر", "تونس": "تونس",
    "ليبيا": "طرابلس", "السودان": "الخرطوم", "اليمن": "صنعاء",
    "موريتانيا": "نواكشوط", "جيبوتي": "جيبوتي", "الصومال": "مقديشو",

    # أوروبا
    "فرنسا": "باريس", "ألمانيا": "برلين", "إيطاليا": "روما",
    "إسبانيا": "مدريد", "البرتغال": "لشبونة", "إنجلترا": "لندن",
    "روسيا": "موسكو", "تركيا": "أنقرة", "هولندا": "أمستردام",
    "بلجيكا": "بروكسل", "سويسرا": "برن", "النمسا": "فيينا",
    "اليونان": "أثينا", "بولندا": "وارسو", "التشيك": "براغ",
    "المجر": "بودابست", "رومانيا": "بوخارست", "بلغاريا": "صوفيا",
    "كرواتيا": "زغرب", "صربيا": "بلغراد", "السويد": "ستوكهولم",
    "النرويج": "أوسلو", "فنلندا": "هلسنكي", "الدنمارك": "كوبنهاجن",
    "أيسلندا": "ريكيافيك", "أيرلندا": "دبلن", "البرتغال": "لشبونة",
    "مالطا": "فاليتا", "قبرص": "نيقوسيا", "لوكسمبورغ": "لوكسمبورغ",
    "موناكو": "موناكو", "ليختنشتاين": "فادوز", "أندورا": "أندورا لا فيلا",
    "سان مارينو": "سان مارينو", "الفاتيكان": "الفاتيكان",

    # آسيا
    "اليابان": "طوكيو", "الصين": "بكين", "الهند": "نيودلهي",
    "كوريا الجنوبية": "سيؤول", "كوريا الشمالية": "بيونغ يانغ",
    "تايلاند": "بانكوك", "فيتنام": "هانوي", "كمبوديا": "بنوم بنه",
    "لاوس": "فيينتيان", "ميانمار": "نايبيداو", "إندونيسيا": "جاكرتا",
    "ماليزيا": "كوالالمبور", "الفلبين": "مانيلا", "سنغافورة": "سنغافورة",
    "بنغلاديش": "دكا", "باكستان": "إسلام آباد", "أفغانستان": "كابل",
    "إيران": "طهران", "كازاخستان": "نور سلطان", "أوزبكستان": "طشقند",
    "تركمانستان": "عشق آباد", "قيرغيزستان": "بيشكيك", "طاجيكستان": "دوشانبه",
    "منغوليا": "أولان باتور", "نيبال": "كاتماندو", "بوتان": "تيمفو",
    "سريلانكا": "كولومبو", "المالديف": "ماليه", "بروناي": "بندر سيري بيغاوان",

    # الأمريكتين
    "أمريكا": "واشنطن", "كندا": "أوتاوا", "البرازيل": "برازيليا",
    "الأرجنتين": "بوينس آيرس", "المكسيك": "مكسيكو سيتي",
    "تشيلي": "سانتياجو", "كولومبيا": "بوغوتا", "فنزويلا": "كاراكاس",
    "بيرو": "ليما", "الإكوادور": "كيتو", "بوليفيا": "لاباز",
    "باراجواي": "أسونسيون", "أوروغواي": "مونتيفيديو", "جويانا": "جورج تاون",
    "سورينام": "باراماريبو", "جويانا الفرنسية": "كايين", "كوبا": "هافانا",
    "جامايكا": "كينغستون", "هايتي": "بورت أو برنس", "جمهورية الدومينيكان": "سانتو دومينغو",
    "غواتيمالا": "مدينة غواتيمالا", "هندوراس": "تيغوسيغالبا", "السلفادور": "سان سلفادور",
    "نيكاراغوا": "ماناغوا", "كوستاريكا": "سان خوسيه", "بنما": "بنما سيتي",

    # أفريقيا وأوقيانوسيا
    "جنوب أفريقيا": "كيب تاون", "نيجيريا": "أبوجا", "كينيا": "نيروبي",
    "إثيوبيا": "أديس أبابا", "غانا": "أكرا", "أوغندا": "كمبالا",
    "تنزانيا": "دودوما", "الكاميرون": "ياوندي", "مدغشقر": "أنتاناناريفو",
    "موزمبيق": "مابوتو", "أنغولا": "لواندا", "زامبيا": "لوساكا",
    "زيمبابوي": "هراري", "بوتسوانا": "جابورون", "ناميبيا": "ويندهوك",
    "مالي": "باماكو", "بركينا فاسو": "واغادوغو", "النيجر": "نيامي",
    "تشاد": "أنجامينا", "السنغال": "داكار", "ساحل العاج": "ياموسوكرو",
    "غينيا": "كوناكري", "سيراليون": "فري تاون", "ليبيريا": "مونروفيا",
    "أستراليا": "كانبرا", "نيوزيلندا": "ويلينغتون", "بابوا غينيا الجديدة": "بورت مورسبي",
    "فيجي": "سوفا", "ساموا": "آبيا", "تونغا": "نوكو ألوفا"
}

INVENTIONS_INVENTORS = {
    # اختراعات تكنولوجية
    "الهاتف": "ألكسندر جراهام بيل", "الكهرباء": "توماس أديسون",
    "الحاسوب": "تشارلز باباج", "الإنترنت": "تيم بيرنرز لي",
    "التلفزيون": "جون لوجي بيرد", "الراديو": "جوليلمو ماركوني",
    "اللمبة الكهربائية": "توماس أديسون", "المطبعة": "يوهانس جوتنبرغ",
    "الليزر": "ثيودور مايمان", "الأشعة السينية": "فيلهلم رونتجن",
    "الترانزستور": "جون بردين", "الميكروسكوب": "أنتون فان ليوينهوك",
    "التلسكوب": "غاليليو غاليلي", "البوصلة": "الصينيون القدماء",
    "البارود": "الصينيون القدماء", "الورق": "تساي لون",

    # اختراعات النقل
    "الطائرة": "الأخوان رايت", "السيارة": "كارل بنز",
    "القطار": "ريتشارد تريفيثيك", "الدراجة": "كارل درايس",
    "المحرك البخاري": "جيمس واط", "المروحية": "إيغور سيكورسكي",
    "الغواصة": "كورنيليوس دريبل", "المنطاد": "الأخوان مونتجولفييه",
    "الصاروخ": "روبرت جودارد", "السفينة البخارية": "روبرت فولتون",

    # اختراعات طبية
    "البنسلين": "ألكسندر فليمنغ", "اللقاحات": "إدوارد جينر",
    "المضادات الحيوية": "ألكسندر فليمنغ", "أشعة إكس": "فيلهلم رونتجن",
    "التخدير": "وليام مورتون", "القلب الاصطناعي": "بول وينشيل",
    "جهاز التنفس الاصطناعي": "فيليب درينكر", "زراعة الأعضاء": "جوزيف موراي",
    "الأنسولين": "فريديريك بانتنج", "المكواة الكهربائية للعلاج": "بوفيري",

    # اختراعات منزلية وتطبيقية
    "النظارات": "سلفينو أرماتي", "الكاميرا": "جوزيف نيسيفور نيبس",
    "المايكرويف": "بيرسي سبنسر", "الثلاجة": "جاكوب بيركنز",
    "المكيف": "ويليس كاريير", "المكنسة الكهربائية": "هوبرت بوث",
    "الغسالة": "ألفا فيشر", "الخلاط الكهربائي": "ستيفن بوبلوسكي",
    "الفرن الكهربائي": "توماس أهيرن", "ماكينة الخياطة": "إلياس هو",
    "ماكينة القهوة": "لويجي بيتزيني", "الجيتار الكهربائي": "أدولف ريكنباكر",

    # اختراعات حديثة
    "الهاتف المحمول": "مارتن كوبر", "الآي فون": "ستيف جوبز",
    "فيسبوك": "مارك زوكربيرغ", "جوجل": "لاري بيج وسيرجي برين",
    "أمازون": "جيف بيزوس", "تسلا": "إيلون ماسك",
    "يوتيوب": "تشاد هيرلي", "تويتر": "جاك دورسي",
    "واتساب": "بريان أكتون", "إنستغرام": "كيفن سيستروم",
    "أوبر": "ترافيس كالانيك", "إيباي": "بيير أوميديار"
}

SCIENTIFIC_CONCEPTS = {
    # فيزياء
    "الجاذبية": "قوة الجذب بين الأجسام التي لها كتلة، وهي المسؤولة عن حركة الكواكب والأقمار",
    "النسبية": "نظرية أينشتاين التي غيرت فهمنا للزمان والمكان والجاذبية",
    "الكوانتم": "أصغر وحدة من الطاقة أو المادة يمكن أن توجد بشكل منفصل",
    "الكهرومغناطيسية": "القوة التي تحكم التفاعل بين الجسيمات المشحونة كهربائياً",
    "الضوء": "شكل من أشكال الطاقة الكهرومغناطيسية المرئية للعين البشرية",
    "الصوت": "موجات اهتزازية تنتقل عبر الهواء أو المواد الأخرى وتصل إلى الأذن",
    "الحرارة": "شكل من أشكال الطاقة ينتقل من الأجسام الساخنة إلى الباردة",
    "الطاقة": "القدرة على إنجاز عمل أو إحداث تغيير في النظام",

    # كيمياء
    "الذرة": "أصغر وحدة في المادة تحتفظ بخصائص العنصر الكيميائي",
    "الجزيء": "مجموعة من الذرات المترابطة تشكل أصغر وحدة من المركب",
    "التفاعل الكيميائي": "عملية تكسير وتكوين روابط بين الذرات لإنتاج مواد جديدة",
    "الحمض": "مادة تطلق أيونات الهيدروجين عند ذوبانها في الماء",
    "القاعدة": "مادة تتفاعل مع الأحماض وتقبل أيونات الهيدروجين",
    "الأكسدة": "عملية فقدان الإلكترونات أو زيادة الأكسجين في المادة",
    "الاختزال": "عملية كسب الإلكترونات أو فقدان الأكسجين من المادة",

    # أحياء
    "الحمض النووي": "المادة الوراثية التي تحمل المعلومات الجينية لجميع الكائنات الحية",
    "الخلية": "الوحدة الأساسية للحياة وأصغر وحدة في الكائن الحي",
    "البروتين": "جزيئات كبيرة تتكون من أحماض أمينية وتؤدي وظائف حيوية مهمة",
    "التمثيل الغذائي": "مجموعة العمليات الكيميائية التي تحدث في الخلايا للحفاظ على الحياة",
    "التطور": "عملية التغيير التدريجي في الكائنات الحية عبر الأجيال",
    "الوراثة": "انتقال الصفات من الآباء إلى الأبناء عبر الجينات",
    "البناء الضوئي": "عملية تحويل ضوء الشمس إلى طاقة كيميائية في النباتات",

    # تكنولوجيا
    "الذكاء الاصطناعي": "تقنية تمكن الحاسوب من محاكاة التفكير البشري وحل المشاكل المعقدة",
    "البرمجة": "عملية كتابة تعليمات للحاسوب بلغة يفهمها لتنفيذ مهام ووظائف محددة",
    "الإنترنت": "شبكة عالمية تربط مليارات الأجهزة حول العالم لتبادل المعلومات والبيانات",
    "البلوك تشين": "تقنية لحفظ البيانات بطريقة آمنة وموزعة لا يمكن تعديلها أو التلاعب بها",
    "الواقع الافتراضي": "تقنية تنشئ بيئة محاكاة تفاعلية ثلاثية الأبعاد",
    "الواقع المعزز": "تقنية تدمج العناصر الرقمية مع العالم الحقيقي",
    "إنترنت الأشياء": "شبكة من الأجهزة المتصلة التي تتبادل البيانات تلقائياً",

    # بيئة وطاقة
    "الطاقة المتجددة": "الطاقة المستمدة من مصادر طبيعية متجددة مثل الشمس والرياح والماء",
    "الاحتباس الحراري": "زيادة درجة حرارة الأرض بسبب زيادة غازات الدفيئة في الغلاف الجوي",
    "التنوع البيولوجي": "تنوع الحياة على الأرض من النباتات والحيوانات والكائنات الدقيقة",
    "التلوث": "إدخال مواد ضارة إلى البيئة مما يؤثر سلباً على الكائنات الحية",
    "الاستدامة": "استخدام الموارد بطريقة تلبي احتياجات الحاضر دون الإضرار بالمستقبل",

    # رياضيات
    "الجبر": "فرع من الرياضيات يستخدم الرموز والمتغيرات لحل المعادلات",
    "الهندسة": "علم دراسة الأشكال والمساحات والحجوم والعلاقات المكانية",
    "الإحصاء": "علم جمع وتحليل وتفسير البيانات العددية",
    "التفاضل والتكامل": "فرع من الرياضيات يدرس معدلات التغيير والمساحات تحت المنحنيات",
    "نظرية الاحتمال": "دراسة إمكانية حدوث الأحداث والتنبؤ بالنتائج"
}

SPORTS_WINNERS = {
    "كأس العالم 2022": "الأرجنتين", "كأس العالم 2018": "فرنسا",
    "كأس العالم 2014": "ألمانيا", "كأس العالم 2010": "إسبانيا",
    "بطولة أوروبا 2021": "إيطاليا", "كوبا أمريكا 2021": "الأرجنتين",
    "دوري أبطال أوروبا 2023": "مانشستر سيتي", "الدوري الإنجليزي 2023": "مانشستر سيتي",
    "أولمبياد طوكيو 2021": "الولايات المتحدة", "كأس الأمم الأفريقية 2021": "السنغال",
    "دوري أبطال آسيا 2023": "الهلال السعودي", "كأس آسيا 2019": "قطر",
    "كأس العرب 2021": "الجزائر", "دوري أبطال أفريقيا 2023": "الأهلي المصري"
}

WORLD_RECORDS = {
    "أطول نهر في العالم": "نهر النيل بطول 6650 كيلومتر",
    "أكبر محيط في العالم": "المحيط الهادئ",
    "أعلى قمة في العالم": "جبل إيفرست بارتفاع 8848 متر",
    "أكبر صحراء في العالم": "الصحراء الكبرى في أفريقيا",
    "أعمق نقطة في المحيطات": "خندق ماريانا في المحيط الهادئ",
    "أكبر دولة في العالم": "روسيا بمساحة 17.1 مليون كيلومتر مربع",
    "أصغر دولة في العالم": "الفاتيكان بمساحة 0.17 ميل مربع",
    "أكثر دولة سكاناً": "الصين بأكثر من 1.4 مليار نسمة",
    "أطول جسر في العالم": "جسر دانيانغ-كونشان الكبير في الصين",
    "أعلى مبنى في العالم": "برج خليفة في دبي بارتفاع 828 متر"
}

FAMOUS_PEOPLE = {
    "محمد صلاح": "لاعب كرة قدم مصري يلعب في ليفربول، من أفضل اللاعبين في العالم",
    "ليونيل ميسي": "لاعب أرجنتيني، فاز بكأس العالم 2022 ويعتبر من أعظم اللاعبين",
    "كريستيانو رونالدو": "لاعب برتغالي، من أعظم لاعبي كرة القدم في التاريخ",
    "ألبرت أينشتاين": "عالم فيزياء ألماني وضع نظرية النسبية وغير فهمنا للكون",
    "إسحاق نيوتن": "عالم إنجليزي وضع قوانين الحركة والجاذبية الأساسية",
    "محمد علي كلاي": "أعظم ملاكم في التاريخ، معروف بقوته وشخصيته الكاريزمية",
    "مارك زوكربيرغ": "مؤسس فيسبوك وواحد من أهم رواد التكنولوجيا",
    "ستيف جوبز": "مؤسس شركة أبل وأحد رواد ثورة الحاسوب الشخصي",
    "بيل غيتس": "مؤسس مايكروسوفت وأحد أغنى أشخاص العالم",
    "إيلون ماسك": "رائد أعمال ومؤسس تسلا وسبيس إكس"
}

COLORS_MEANINGS = {
    "الأحمر": "لون الطاقة والحيوية والحب والشغف",
    "الأزرق": "لون الهدوء والثقة والاستقرار والسلام",
    "الأخضر": "لون الطبيعة والنمو والتوازن والهدوء",
    "الأصفر": "لون السعادة والتفاؤل والطاقة الإيجابية",
    "البرتقالي": "لون الحماس والإبداع والدفء",
    "البنفسجي": "لون الروحانية والإبداع والغموض",
    "الأسود": "لون الأناقة والقوة والغموض",
    "الأبيض": "لون النقاء والصفاء والبساطة",
    "الوردي": "لون الحب والحنان والأنوثة",
    "البني": "لون الطبيعة والاستقرار والموثوقية"
}

ANIMALS_INFO = {
    "الأسد": "ملك الغابة، من أقوى الحيوانات المفترسة ويعيش في مجموعات",
    "الفيل": "أكبر الثدييات البرية، يتميز بذكائه وذاكرته القوية",
    "الدولفين": "من أذكى الحيوانات البحرية، يتواصل بالأصوات المعقدة",
    "النمر": "أسرع الحيوانات البرية، يمكنه الوصول لسرعة 120 كم/ساعة",
    "الحوت الأزرق": "أكبر حيوان في العالم، يمكن أن يصل طوله إلى 30 متراً",
    "النحلة": "حشرة مهمة للبيئة، تنتج العسل وتلقح النباتات",
    "القرش": "سمك مفترس قديم، موجود منذ 400 مليون سنة",
    "البطريق": "طائر لا يطير لكنه سباح ماهر في المياه الباردة",
    "الزرافة": "أطول الحيوانات البرية، يمكن أن يصل طولها إلى 6 أمتار",
    "الكنغر": "حيوان أسترالي يتنقل بالقفز ويحمل صغاره في جرابه"
}

QUESTION_TEMPLATES = {
    "capitals": [
        "ما هي عاصمة {}؟",
        "ما عاصمة {}؟",
        "عاصمة {} هي؟",
        "أين تقع عاصمة {}؟",
        "ما اسم عاصمة {}؟"
    ],
    "inventors": [
        "من هو مخترع {}؟",
        "من اخترع {}؟",
        "من قام باختراع {}؟",
        "من يعتبر مخترع {}؟",
        "من ابتكر {}؟"
    ],
    "definitions": [
        "ما هو {}؟",
        "عرف {}؟",
        "اشرح مفهوم {}",
        "ما المقصود بـ{}؟",
        "وضح معنى {}"
    ],
    "sports": [
        "من فاز بـ{}؟",
        "من حصل على {}؟",
        "من الفائز بـ{}؟",
        "من نال {}؟",
        "من أحرز {}؟"
    ],
    "records": [
        "ما هو {}؟",
        "أين يقع {}؟",
        "كم يبلغ {}؟",
        "ما هي {}؟",
        "اذكر معلومات عن {}"
    ],
    "people": [
        "من هو {}؟",
        "عرفني بـ{}",
        "اذكر معلومات عن {}",
        "ماذا تعرف عن {}؟",
        "أخبرني عن {}"
    ],
    "colors": [
        "ماذا يرمز اللون {}؟",
        "ما معنى اللون {}؟",
        "ما دلالة اللون {}؟",
        "اللون {} يعني؟",
        "ما مدلول اللون {}؟"
    ],
    "animals": [
        "ما هو {}؟",
        "عرفني بحيوان {}",
        "اذكر معلومات عن {}",
        "ماذا تعرف عن {}؟",
        "أخبرني عن حيوان {}"
    ]
}

GENERAL_QA = [
    {"question": "كم عدد أيام السنة؟", "answer": "السنة العادية 365 يوماً، والسنة الكبيسة 366 يوماً"},
    {"question": "كم عدد قارات العالم؟", "answer": "عدد قارات العالم 7 قارات: آسيا، أفريقيا، أوروبا، أمريكا الشمالية، أمريكا الجنوبية، أستراليا، والقطب الجنوبي"},
    {"question": "ما هي أكبر قارة في العالم؟", "answer": "آسيا هي أكبر قارة في العالم من حيث المساحة وعدد السكان"},
    {"question": "كم عدد المحيطات في العالم؟", "answer": "عدد المحيطات في العالم 5: الهادئ، الأطلسي، الهندي، المتجمد الشمالي، والمتجمد الجنوبي"},
    {"question": "ما هي أكبر دولة عربية؟", "answer": "الجزائر هي أكبر دولة عربية من حيث المساحة"},
    {"question": "كم عدد عضلات جسم الإنسان؟", "answer": "جسم الإنسان يحتوي على حوالي 600 عضلة"},
    {"question": "ما هي أسرع الحيوانات؟", "answer": "النمر هو أسرع الحيوانات البرية بسرعة تصل إلى 120 كم/ساعة"},
    {"question": "كم عدد عظام جسم الإنسان؟", "answer": "جسم الإنسان البالغ يحتوي على 206 عظمة"},
    {"question": "ما هي عاصمة العالم؟", "answer": "لا توجد عاصمة رسمية للعالم، لكن نيويورك تعتبر مركزاً عالمياً مهماً"},
    {"question": "كم عدد أسنان الإنسان البالغ؟", "answer": "الإنسان البالغ لديه 32 سناً"}
]

GREETINGS_QA = [
    {"question": "مرحبا", "answer": "مرحباً بك! 😊 كيف يمكنني مساعدتك اليوم؟"},
    {"question": "السلام عليكم", "answer": "وعليكم السلام ورحمة الله وبركاته 🕊️ أهلاً وسهلاً بك"},
    {"question": "صباح الخير", "answer": "صباح الخير! نتمنى لك يوماً سعيداً ومليئاً بالإنجازات ☀️"},
    {"question": "مساء الخير", "answer": "مساء الخير! كيف كان يومك؟ 🌅"},
    {"question": "كيف حالك", "answer": "بخير والحمد لله! شكراً لسؤالك، كيف حالك أنت؟ 😊"},
    {"question": "شكرا", "answer": "عفواً! دائماً في الخدمة 🙏 هل تحتاج مساعدة أخرى؟"},
    {"question": "أهلا", "answer": "أهلاً وسهلاً! مرحباً بك 🌟"},
    {"question": "تصبح على خير", "answer": "وأنت من أهله! تصبح على خير وأحلام سعيدة 🌙"}
]

def generate_single_array_data(array_size):
    """
    توليد مصفوفة واحدة من الأسئلة والأجوبة.
    """
    data = []

    base_questions = GREETINGS_QA + GENERAL_QA
    selected_base = random.sample(base_questions, min(30, len(base_questions)))
    data.extend(selected_base)

    remaining = array_size - len(data)

    categories = [
        ("capitals", COUNTRIES_CAPITALS),
        ("inventors", INVENTIONS_INVENTORS),
        ("definitions", SCIENTIFIC_CONCEPTS),
        ("sports", SPORTS_WINNERS),
        ("records", WORLD_RECORDS),
        ("people", FAMOUS_PEOPLE),
        ("colors", COLORS_MEANINGS),
        ("animals", ANIMALS_INFO)
    ]

    base_questions_per_category = remaining // len(categories)
    extra_questions = remaining % len(categories)

    for i, (category, data_dict) in enumerate(categories):
        questions_for_this_category = base_questions_per_category
        if i < extra_questions:
            questions_for_this_category += 1

        templates = QUESTION_TEMPLATES[category]
        items = list(data_dict.items())

        for j in range(questions_for_this_category):
            key, value = random.choice(items)
            template = random.choice(templates)

            question = template.format(key)

            if j > 0 and j % 10 == 0:
                if category == "capitals" and len(items) > 1:
                    second_country = random.choice(items)[0]
                    question = f"ما الفرق بين عاصمة {key} وعاصمة {second_country}؟"
                    answer = f"عاصمة {key} هي {value}، بينما عاصمة {second_country} هي {data_dict[second_country]} 🏛️"
                elif category == "inventors" and len(items) > 1:
                    question = f"متى اخترع {value} {key}؟"
                    answer = f"{value} هو مخترع {key} 🔬"
                elif category == "definitions":
                    question = f"ما هي أهمية {key}؟"
                    answer = f"{key} مهم لأنه {value} 🧠"
                elif category == "sports":
                    question = f"ما هي جنسية الفائز بـ{key}؟"
                    answer = f"الفائز بـ{key} هو {value} 🏆"
                elif category == "records":
                    question = f"أين يقع {key}؟"
                    answer = f"{key} يقع في {value} 🌍"
                elif category == "people":
                    question = f"ما هو أهم إنجاز لـ{key}؟"
                    answer = f"أهم إنجاز لـ{key} هو {value} 👨‍💼"
                elif category == "colors":
                    question = f"ما هي الألوان التي تتكون منها {key}؟"
                    answer = f"اللون {key} يتكون من {value} 🎨"
                elif category == "animals":
                    question = f"أين يعيش {key}؟"
                    answer = f"{key} يعيش في {value} 🐾"

            if 'answer' not in locals():
                if category == "capitals":
                    answer = f"عاصمة {key} هي {value} 🏛️"
                elif category == "inventors":
                    answer = f"مخترع {key} هو {value} 🔬"
                elif category == "definitions":
                    answer = f"{key}: {value} 🧠"
                elif category == "sports":
                    answer = f"الفائز بـ{key} هو {value} 🏆"
                elif category == "records":
                    answer = f"{key} هو {value} 🌍"
                elif category == "people":
                    answer = f"{key}: {value} 👨‍💼"
                elif category == "colors":
                    answer = f"اللون {key}: {value} 🎨"
                elif category == "animals":
                    answer = f"{key}: {value} 🐾"

            data.append({
                "question": question,
                "answer": answer,
                "category": category
            })

            if 'answer' in locals():
                del answer

    while len(data) < array_size:
        category, data_dict = random.choice(categories)
        templates = QUESTION_TEMPLATES[category]
        key, value = random.choice(list(data_dict.items()))
        template = random.choice(templates)

        question = template.format(key)
        answer = f"{value}"

        data.append({
            "question": question,
            "answer": answer,
            "category": category
        })

    random.shuffle(data)

    return data[:array_size]

def generate_arrays_data():
    arrays_data = {}

    print(f"🚀 بدء توليد {NUMBER_OF_ARRAYS} مصفوفة، كل واحدة تحتوي على {RESPONSES_PER_ARRAY} رد...")
    print(f"📊 إجمالي الأسئلة المطلوبة: {TOTAL_RESPONSES:,} سؤال وجواب")
    print("⏳ هذه العملية قد تستغرق عدة دقائق...")

    for i in range(1, NUMBER_OF_ARRAYS + 1):
        if i % 20 == 0:
            print(f"⏳ تم إنتاج {i}/{NUMBER_OF_ARRAYS} مصفوفة... ({(i/NUMBER_OF_ARRAYS)*100:.1f}%)")

        array_name = f"responses_array_{i}"
        array_data = generate_single_array_data(RESPONSES_PER_ARRAY)
        arrays_data[array_name] = array_data

    print(f"✅ تم إنتاج جميع المصفوفات بنجاح!")
    return arrays_data

def create_optimized_webhook_data():
    print("🔧 إنشاء ملف JSON محسّن للويب هوك...")
    arrays_data = generate_arrays_data()

    optimized_data = {
        "responses": {},
        "keywords": {},
        "categories": {},
        "statistics": {
            "total_questions": 0,
            "total_arrays": len(arrays_data),
            "categories_count": {},
            "generation_time": datetime.now().isoformat(),
            "version": "1.0_OPTIMIZED"
        }
    }

    question_id = 1

    for array_name, array_data in arrays_data.items():
        for item in array_data:
            question = item['question'].lower().strip()
            answer = item['answer']
            category = item.get('category', 'general')

            response_key = f"q_{question_id}"
            optimized_data["responses"][response_key] = {
                "question": question,
                "answer": answer,
                "category": category
            }

            keywords = question.split()
            for keyword in keywords:
                keyword = keyword.strip("؟.,!()[]{}\"'")
                if len(keyword) > 2:
                    if keyword not in optimized_data["keywords"]:
                        optimized_data["keywords"][keyword] = []
                    optimized_data["keywords"][keyword].append(response_key)

            if category not in optimized_data["categories"]:
                optimized_data["categories"][category] = []
            optimized_data["categories"][category].append(response_key)

            if category not in optimized_data["statistics"]["categories_count"]:
                optimized_data["statistics"]["categories_count"][category] = 0
            optimized_data["statistics"]["categories_count"][category] += 1

            question_id += 1

    optimized_data["statistics"]["total_questions"] = question_id - 1
    
    # Check if the directory 'netlify/functions' exists, if not, create it
    # This is a safety measure to prevent errors
    output_dir = 'netlify/functions'
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    with open(os.path.join(output_dir, 'responses_optimized.json'), 'w', encoding='utf-8') as f:
        json.dump(optimized_data, f, ensure_ascii=False, indent=2)

    print(f"✅ تم إنشاء ملف JSON محسّن: responses_optimized.json")
    print(f"📊 إجمالي الأسئلة: {optimized_data['statistics']['total_questions']:,}")
    print(f"📊 إجمالي الكلمات المفتاحية: {len(optimized_data['keywords']):,}")

if __name__ == "__main__":
    print("🚀 مولد قاعدة البيانات الضخمة يعمل تلقائياً...")
    print("=" * 60)
    print(f"📊 المواصفات:")
    print(f"   • عدد المصفوفات: {NUMBER_OF_ARRAYS:,}")
    print(f"   • أسئلة لكل مصفوفة: {RESPONSES_PER_ARRAY:,}")
    print(f"   • إجمالي الأسئلة: {TOTAL_RESPONSES:,}")
    print("=" * 60)
    create_optimized_webhook_data()
    print("👋 اكتملت عملية التوليد بنجاح!")
